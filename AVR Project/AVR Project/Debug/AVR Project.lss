
AVR Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  000016e2  00001776  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  0080019c  0080019c  00001812  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001812  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a1a  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001368  00000000  00000000  000045ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017ec  00000000  00000000  00005932  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000794  00000000  00000000  00007120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cc5  00000000  00000000  000078b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016a0  00000000  00000000  00008579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00009c19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__ctors_end>
       4:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
       8:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
       c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      10:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      14:	0c 94 c4 01 	jmp	0x388	; 0x388 <__vector_5>
      18:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      1c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      20:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      24:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      28:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      2c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      30:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      34:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      38:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      3c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      40:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_16>
      44:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      48:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      4c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      50:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_20>
      54:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_21>
      58:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      5c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      60:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      64:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      68:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      6c:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      70:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      74:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>
      78:	0c 94 81 01 	jmp	0x302	; 0x302 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	27 72       	andi	r18, 0x27	; 39
      84:	27 2f       	mov	r18, r23
      86:	27 52       	subi	r18, 0x27	; 39
      88:	27 20       	and	r2, r7
      8a:	74 6f       	ori	r23, 0xF4	; 244
      8c:	20 72       	andi	r18, 0x20	; 32
      8e:	65 73       	andi	r22, 0x35	; 53
      90:	74 61       	ori	r23, 0x14	; 20
      92:	72 74       	andi	r23, 0x42	; 66
      94:	2c 20       	and	r2, r12
      96:	6f 72       	andi	r22, 0x2F	; 47
      98:	20 27       	eor	r18, r16
      9a:	65 27       	eor	r22, r21
      9c:	2f 27       	eor	r18, r31
      9e:	45 27       	eor	r20, r21
      a0:	20 74       	andi	r18, 0x40	; 64
      a2:	6f 20       	and	r6, r15
      a4:	65 78       	andi	r22, 0x85	; 133
      a6:	69 74       	andi	r22, 0x49	; 73
	...

000000a9 <__c.2594>:
      a9:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b3 <__c.2574>:
      b3:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 50 72     CSSE2010/7201 Pr
      c3:	6f 6a 65 63 74 20 62 79 20 3c 59 4f 55 52 20 4e     oject by <YOUR N
      d3:	41 4d 45 3e 20 2d 20 3c 59 4f 55 52 20 53 54 55     AME> - <YOUR STU
      e3:	44 45 4e 54 20 4e 55 4d 42 45 52 3e 00              DENT NUMBER>.

000000f0 <title_data>:
      f0:	60 38 1f 3f 3f 63 7e fe 60 bc b1 b1 61 66 c3 c0     `8.??c~.`...af..
     100:	60 b6 3f bf 61 7c c3 fe 60 b3 b1 b1 61 66 c3 06     `.?.a|..`...af..
     110:	e0 b1 31 3f 3f 63 7e fe                             ..1??c~.

00000118 <anim_data>:
     118:	f0 f0 00 f0 f0 f0 f0 00 f0 00 00 f0 00 00 f0 00     ................
     128:	f0 00 00 f0 00 00 f0 00 f0 f0 f0 f0 00 f0 f0 00     ................
	...
     140:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     150:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     168:	f0 f0 f0 f0 f0 f0 f0 00 00 00 00 f0 00 00 00 00     ................
     178:	00 00 f0 00 f0 00 00 00 f0 f0 00 00 00 f0 00 00     ................
	...
     190:	f0 f0 f0 f0 f0 00 00 00 f0 00 00 00 f0 00 00 00     ................
     1a0:	f0 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     1b8:	f0 f0 f0 f0 f0 f0 f0 00 f0 00 00 f0 00 00 00 00     ................
     1c8:	f0 00 00 f0 00 00 00 00 f0 f0 f0 f0 00 00 00 00     ................
	...
     1e0:	f0 f0 f0 00 f0 00 00 00 f0 00 f0 00 f0 00 00 00     ................
     1f0:	f0 00 f0 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     208:	f0 f0 f0 f0 f0 00 00 00 00 00 00 00 f0 00 00 00     ................
     218:	00 00 00 00 f0 00 00 00 f0 f0 f0 f0 f0 00 00 00     ................
	...
     238:	3c 3c 3c 3c 3c 3c 00 00 3c 3c 00 00 3c 3c 00 00     <<<<<<..<<..<<..
     248:	3c 00 3c 3c 00 3c 00 00 3c 00 3c 3c 00 3c 00 00     <.<<.<..<.<<.<..
     258:	3c 3c 00 00 3c 3c 00 00 3c 3c 3c 3c 3c 3c 00 00     <<..<<..<<<<<<..
     268:	00 00 00 10 00 10 00 00 10 00 00 10 00 10 00 00     ................
     278:	00 10 00 00 10 00 10 10 00 00 10 10 00 10 10 10     ................
     288:	00 10 00 00 00 00 10 10 10 00 00 00 00 00 00 00     ................
	...

000002a8 <__c.2187>:
     2a8:	1b 5b 3f 32 35 6c 00                                .[?25l.

000002af <__c.2182>:
     2af:	1b 5b 25 64 6d 00                                   .[%dm.

000002b5 <__c.2172>:
     2b5:	1b 5b 32 4a 00                                      .[2J.

000002ba <__c.2162>:
     2ba:	1b 5b 30 6d 00                                      .[0m.

000002bf <__c.2157>:
     2bf:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000002c8 <__ctors_end>:
     2c8:	11 24       	eor	r1, r1
     2ca:	1f be       	out	0x3f, r1	; 63
     2cc:	cf ef       	ldi	r28, 0xFF	; 255
     2ce:	d8 e0       	ldi	r29, 0x08	; 8
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	cd bf       	out	0x3d, r28	; 61

000002d4 <__do_copy_data>:
     2d4:	11 e0       	ldi	r17, 0x01	; 1
     2d6:	a0 e0       	ldi	r26, 0x00	; 0
     2d8:	b1 e0       	ldi	r27, 0x01	; 1
     2da:	e2 ee       	ldi	r30, 0xE2	; 226
     2dc:	f6 e1       	ldi	r31, 0x16	; 22
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <__do_copy_data+0x10>
     2e0:	05 90       	lpm	r0, Z+
     2e2:	0d 92       	st	X+, r0
     2e4:	ac 39       	cpi	r26, 0x9C	; 156
     2e6:	b1 07       	cpc	r27, r17
     2e8:	d9 f7       	brne	.-10     	; 0x2e0 <__do_copy_data+0xc>

000002ea <__do_clear_bss>:
     2ea:	23 e0       	ldi	r18, 0x03	; 3
     2ec:	ac e9       	ldi	r26, 0x9C	; 156
     2ee:	b1 e0       	ldi	r27, 0x01	; 1
     2f0:	01 c0       	rjmp	.+2      	; 0x2f4 <.do_clear_bss_start>

000002f2 <.do_clear_bss_loop>:
     2f2:	1d 92       	st	X+, r1

000002f4 <.do_clear_bss_start>:
     2f4:	a0 35       	cpi	r26, 0x50	; 80
     2f6:	b2 07       	cpc	r27, r18
     2f8:	e1 f7       	brne	.-8      	; 0x2f2 <.do_clear_bss_loop>
     2fa:	0e 94 c3 03 	call	0x786	; 0x786 <main>
     2fe:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <_exit>

00000302 <__bad_interrupt>:
     302:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000306 <init_buttons>:
	// using a pin change interrupt. These pins correspond to pin
	// change interrupts PCINT8 to PCINT11 which are covered by
	// pin change interrupt 1.

	// Empty the button push queue and reset last state.
	queue_length = 0;
     306:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
	last_button_state = 0;
     30a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <last_button_state>

	// Enable the interrupt (see datasheet page 77).
	PCICR |= (1 << PCIE1);
     30e:	e8 e6       	ldi	r30, 0x68	; 104
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	82 60       	ori	r24, 0x02	; 2
     316:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see datasheet page 78).
	PCIFR |= (1 << PCIF1);
     318:	8b b3       	in	r24, 0x1b	; 27
     31a:	82 60       	ori	r24, 0x02	; 2
     31c:	8b bb       	out	0x1b, r24	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see datasheet page 78).
	PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) |
     31e:	ec e6       	ldi	r30, 0x6C	; 108
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	8f 60       	ori	r24, 0x0F	; 15
     326:	80 83       	st	Z, r24
     328:	08 95       	ret

0000032a <button_pushed>:

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.

	if (queue_length > 0)
     32a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end>
     32e:	88 23       	and	r24, r24
     330:	f9 f0       	breq	.+62     	; 0x370 <button_pushed+0x46>
	{
		// Remove the first element off the queue and move all the
		// other entries closer to the front of the queue. We turn off
		// interrupts (if on) before we make any changes to the queue.
		// If interrupts were on, we turn them back on when done.
		result = button_queue[0];
     332:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <button_queue>

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     336:	5f b7       	in	r21, 0x3f	; 63
     338:	50 78       	andi	r21, 0x80	; 128
		cli();
     33a:	f8 94       	cli
		
		for (uint8_t i = 1; i < queue_length; i++)
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0b c0       	rjmp	.+22     	; 0x356 <button_pushed+0x2c>
		{
			button_queue[i - 1] = button_queue[i];
     340:	29 2f       	mov	r18, r25
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	f9 01       	movw	r30, r18
     346:	e3 56       	subi	r30, 0x63	; 99
     348:	fe 4f       	sbci	r31, 0xFE	; 254
     34a:	40 81       	ld	r20, Z
     34c:	f9 01       	movw	r30, r18
     34e:	e4 56       	subi	r30, 0x64	; 100
     350:	fe 4f       	sbci	r31, 0xFE	; 254
     352:	40 83       	st	Z, r20

		// Save whether interrupts were enabled and turn them off.
		bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for (uint8_t i = 1; i < queue_length; i++)
     354:	9f 5f       	subi	r25, 0xFF	; 255
     356:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <__data_end>
     35a:	92 17       	cp	r25, r18
     35c:	88 f3       	brcs	.-30     	; 0x340 <button_pushed+0x16>
		{
			button_queue[i - 1] = button_queue[i];
		}
		queue_length--;
     35e:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <__data_end>
     362:	91 50       	subi	r25, 0x01	; 1
     364:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <__data_end>

		if (interrupts_were_enabled)
     368:	55 23       	and	r21, r21
     36a:	19 f0       	breq	.+6      	; 0x372 <button_pushed+0x48>
		{
			// Turn them back on again.
			sei();
     36c:	78 94       	sei
     36e:	08 95       	ret
		(1 << PCINT11);
}

ButtonState button_pushed(void)
{
	ButtonState result = NO_BUTTON_PUSHED; // Default result.
     370:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again.
			sei();
		}
	}
	return result;
}
     372:	08 95       	ret

00000374 <clear_button_presses>:

void clear_button_presses(void)
{
	// Save whether interrupts were enabled and turn them off.
	bool interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     374:	8f b7       	in	r24, 0x3f	; 63
	cli();
     376:	f8 94       	cli
	queue_length = 0;
     378:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <__data_end>
	last_button_state = 0;
     37c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <last_button_state>
	if (interrupts_were_enabled)
     380:	88 23       	and	r24, r24
     382:	0c f4       	brge	.+2      	; 0x386 <clear_button_presses+0x12>
	{
		// Turn them back on again.
		sei();
     384:	78 94       	sei
     386:	08 95       	ret

00000388 <__vector_5>:
	}
}

// Interrupt handler for a change on buttons.
ISR(PCINT1_vect)
{
     388:	1f 92       	push	r1
     38a:	0f 92       	push	r0
     38c:	0f b6       	in	r0, 0x3f	; 63
     38e:	0f 92       	push	r0
     390:	11 24       	eor	r1, r1
     392:	2f 93       	push	r18
     394:	3f 93       	push	r19
     396:	4f 93       	push	r20
     398:	8f 93       	push	r24
     39a:	9f 93       	push	r25
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
	// Get the current state of the buttons. We'll compare this with
	// the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     3a0:	43 b1       	in	r20, 0x03	; 3
     3a2:	4f 70       	andi	r20, 0x0F	; 15
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	24 c0       	rjmp	.+72     	; 0x3f0 <__vector_5+0x68>
	{
		if (queue_length < BUTTON_QUEUE_SIZE
     3a8:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <__data_end>
     3ac:	94 30       	cpi	r25, 0x04	; 4
     3ae:	f8 f4       	brcc	.+62     	; 0x3ee <__vector_5+0x66>
				&& (button_state & (1 << pin))
     3b0:	24 2f       	mov	r18, r20
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	08 2e       	mov	r0, r24
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <__vector_5+0x34>
     3b8:	35 95       	asr	r19
     3ba:	27 95       	ror	r18
     3bc:	0a 94       	dec	r0
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <__vector_5+0x30>
     3c0:	20 ff       	sbrs	r18, 0
     3c2:	15 c0       	rjmp	.+42     	; 0x3ee <__vector_5+0x66>
				&& !(last_button_state & (1 << pin)))
     3c4:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <last_button_state>
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	08 2e       	mov	r0, r24
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <__vector_5+0x4a>
     3ce:	35 95       	asr	r19
     3d0:	27 95       	ror	r18
     3d2:	0a 94       	dec	r0
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <__vector_5+0x46>
     3d6:	20 fd       	sbrc	r18, 0
     3d8:	0a c0       	rjmp	.+20     	; 0x3ee <__vector_5+0x66>
				{
			// Add the button push to the queue (and update the
			// length of the queue).
			button_queue[queue_length++] = pin;
     3da:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <__data_end>
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	9e 0f       	add	r25, r30
     3e2:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <__data_end>
     3e6:	f0 e0       	ldi	r31, 0x00	; 0
     3e8:	e3 56       	subi	r30, 0x63	; 99
     3ea:	fe 4f       	sbci	r31, 0xFE	; 254
     3ec:	80 83       	st	Z, r24
	// Iterate over all the buttons and see which ones have changed.
	// Any button pushes are added to the queue of button pushes (if
	// there is space). We ignore button releases so we're just looking
	// for a transition from 0 in the last_button_state bit to a 1 in the
	// button_state.
	for (uint8_t pin = 0; pin < NUM_BUTTONS; pin++)
     3ee:	8f 5f       	subi	r24, 0xFF	; 255
     3f0:	84 30       	cpi	r24, 0x04	; 4
     3f2:	d0 f2       	brcs	.-76     	; 0x3a8 <__vector_5+0x20>
			button_queue[queue_length++] = pin;
		}
	}
	
	// Remember this button state.
	last_button_state = button_state;
     3f4:	40 93 a1 01 	sts	0x01A1, r20	; 0x8001a1 <last_button_state>
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	4f 91       	pop	r20
     402:	3f 91       	pop	r19
     404:	2f 91       	pop	r18
     406:	0f 90       	pop	r0
     408:	0f be       	out	0x3f, r0	; 63
     40a:	0f 90       	pop	r0
     40c:	1f 90       	pop	r1
     40e:	18 95       	reti

00000410 <paint_square>:
// ========================== GAME LOGIC FUNCTIONS ===========================

// This function paints a square based on the object(s) currently on it.
static void paint_square(uint8_t row, uint8_t col)
{
	switch (board[row][col] & OBJECT_MASK)
     410:	90 e1       	ldi	r25, 0x10	; 16
     412:	89 9f       	mul	r24, r25
     414:	f0 01       	movw	r30, r0
     416:	11 24       	eor	r1, r1
     418:	eb 55       	subi	r30, 0x5B	; 91
     41a:	fe 4f       	sbci	r31, 0xFE	; 254
     41c:	e6 0f       	add	r30, r22
     41e:	f1 1d       	adc	r31, r1
     420:	90 81       	ld	r25, Z
     422:	97 70       	andi	r25, 0x07	; 7
     424:	92 30       	cpi	r25, 0x02	; 2
     426:	99 f0       	breq	.+38     	; 0x44e <paint_square+0x3e>
     428:	28 f4       	brcc	.+10     	; 0x434 <paint_square+0x24>
     42a:	99 23       	and	r25, r25
     42c:	41 f0       	breq	.+16     	; 0x43e <paint_square+0x2e>
     42e:	91 30       	cpi	r25, 0x01	; 1
     430:	51 f0       	breq	.+20     	; 0x446 <paint_square+0x36>
     432:	08 95       	ret
     434:	94 30       	cpi	r25, 0x04	; 4
     436:	79 f0       	breq	.+30     	; 0x456 <paint_square+0x46>
     438:	96 30       	cpi	r25, 0x06	; 6
     43a:	89 f0       	breq	.+34     	; 0x45e <paint_square+0x4e>
     43c:	08 95       	ret
	{
		case ROOM:
			ledmatrix_update_pixel(row, col, COLOUR_BLACK);
     43e:	40 e0       	ldi	r20, 0x00	; 0
     440:	0e 94 b2 02 	call	0x564	; 0x564 <ledmatrix_update_pixel>
			break;
     444:	08 95       	ret
		case WALL:
			ledmatrix_update_pixel(row, col, COLOUR_WALL);
     446:	4f ef       	ldi	r20, 0xFF	; 255
     448:	0e 94 b2 02 	call	0x564	; 0x564 <ledmatrix_update_pixel>
			break;
     44c:	08 95       	ret
		case BOX:
			ledmatrix_update_pixel(row, col, COLOUR_BOX);
     44e:	4c e3       	ldi	r20, 0x3C	; 60
     450:	0e 94 b2 02 	call	0x564	; 0x564 <ledmatrix_update_pixel>
			break;
     454:	08 95       	ret
		case TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_TARGET);
     456:	4f e0       	ldi	r20, 0x0F	; 15
     458:	0e 94 b2 02 	call	0x564	; 0x564 <ledmatrix_update_pixel>
			break;
     45c:	08 95       	ret
		case BOX | TARGET:
			ledmatrix_update_pixel(row, col, COLOUR_DONE);
     45e:	40 ef       	ldi	r20, 0xF0	; 240
     460:	0e 94 b2 02 	call	0x564	; 0x564 <ledmatrix_update_pixel>
     464:	08 95       	ret

00000466 <initialise_game>:
}

// This function initialises the global variables used to store the game
// state, and renders the initial game display.
void initialise_game(void)
{
     466:	cf 93       	push	r28
     468:	df 93       	push	r29
	#undef W
	#undef T
	#undef B

	// Set the initial player location (for level 1).
	player_row = 5;
     46a:	85 e0       	ldi	r24, 0x05	; 5
     46c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <player_row>
	player_col = 2;
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <player_col>

	// Make the player icon initially invisible.
	player_visible = false;
     476:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <player_visible>

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     47a:	a0 e0       	ldi	r26, 0x00	; 0
     47c:	27 c0       	rjmp	.+78     	; 0x4cc <initialise_game+0x66>
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     47e:	8a 2f       	mov	r24, r26
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	27 e0       	ldi	r18, 0x07	; 7
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	28 1b       	sub	r18, r24
     488:	39 0b       	sbc	r19, r25
				lv1_layout[row][col];
     48a:	46 2f       	mov	r20, r22
     48c:	50 e0       	ldi	r21, 0x00	; 0
     48e:	fc 01       	movw	r30, r24
     490:	e2 95       	swap	r30
     492:	f2 95       	swap	r31
     494:	f0 7f       	andi	r31, 0xF0	; 240
     496:	fe 27       	eor	r31, r30
     498:	e0 7f       	andi	r30, 0xF0	; 240
     49a:	fe 27       	eor	r31, r30
     49c:	e2 5f       	subi	r30, 0xF2	; 242
     49e:	fe 4f       	sbci	r31, 0xFE	; 254
     4a0:	e4 0f       	add	r30, r20
     4a2:	f5 1f       	adc	r31, r21
     4a4:	70 81       	ld	r23, Z
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			board[MATRIX_NUM_ROWS - 1 - row][col] =
     4a6:	c9 01       	movw	r24, r18
     4a8:	82 95       	swap	r24
     4aa:	92 95       	swap	r25
     4ac:	90 7f       	andi	r25, 0xF0	; 240
     4ae:	98 27       	eor	r25, r24
     4b0:	80 7f       	andi	r24, 0xF0	; 240
     4b2:	98 27       	eor	r25, r24
     4b4:	8b 55       	subi	r24, 0x5B	; 91
     4b6:	9e 4f       	sbci	r25, 0xFE	; 254
     4b8:	fc 01       	movw	r30, r24
     4ba:	e4 0f       	add	r30, r20
     4bc:	f5 1f       	adc	r31, r21
     4be:	70 83       	st	Z, r23

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     4c0:	6f 5f       	subi	r22, 0xFF	; 255
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <initialise_game+0x60>
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	60 31       	cpi	r22, 0x10	; 16
     4c8:	d0 f2       	brcs	.-76     	; 0x47e <initialise_game+0x18>
	// Make the player icon initially invisible.
	player_visible = false;

	// Copy the starting layout (level 1 map) to the board array, and flip
	// all the rows.
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     4ca:	af 5f       	subi	r26, 0xFF	; 255
     4cc:	a8 30       	cpi	r26, 0x08	; 8
     4ce:	d0 f3       	brcs	.-12     	; 0x4c4 <initialise_game+0x5e>
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	0a c0       	rjmp	.+20     	; 0x4e8 <initialise_game+0x82>
	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
     4d4:	6c 2f       	mov	r22, r28
     4d6:	8d 2f       	mov	r24, r29
     4d8:	0e 94 08 02 	call	0x410	; 0x410 <paint_square>
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
	{
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
     4dc:	cf 5f       	subi	r28, 0xFF	; 255
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <initialise_game+0x7c>
     4e0:	c0 e0       	ldi	r28, 0x00	; 0
     4e2:	c0 31       	cpi	r28, 0x10	; 16
     4e4:	b8 f3       	brcs	.-18     	; 0x4d4 <initialise_game+0x6e>
				lv1_layout[row][col];
		}
	}

	// Draw the game board (map).
	for (uint8_t row = 0; row < MATRIX_NUM_ROWS; row++)
     4e6:	df 5f       	subi	r29, 0xFF	; 255
     4e8:	d8 30       	cpi	r29, 0x08	; 8
     4ea:	d0 f3       	brcs	.-12     	; 0x4e0 <initialise_game+0x7a>
		for (uint8_t col = 0; col < MATRIX_NUM_COLUMNS; col++)
		{
			paint_square(row, col);
		}
	}
}
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	08 95       	ret

000004f2 <flash_player>:
// currently not visible, it is set to visible and rendered on the display.
// The static global variable "player_visible" indicates whether the player
// icon is currently visible.
void flash_player(void)
{
	player_visible = !player_visible;
     4f2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <player_visible>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	89 27       	eor	r24, r25
     4fa:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <player_visible>
	if (player_visible)
     4fe:	88 23       	and	r24, r24
     500:	41 f0       	breq	.+16     	; 0x512 <flash_player+0x20>
	{
		// The player is visible, paint it with COLOUR_PLAYER.
		ledmatrix_update_pixel(player_row, player_col, COLOUR_PLAYER);
     502:	40 e1       	ldi	r20, 0x10	; 16
     504:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <player_col>
     508:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <player_row>
     50c:	0e 94 b2 02 	call	0x564	; 0x564 <ledmatrix_update_pixel>
     510:	08 95       	ret
	}
	else
	{
		// The player is not visible, paint the underlying square.
		paint_square(player_row, player_col);
     512:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <player_col>
     516:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <player_row>
     51a:	0e 94 08 02 	call	0x410	; 0x410 <paint_square>
     51e:	08 95       	ret

00000520 <move_player>:
	}
}

// This function handles player movements.
void move_player(int8_t delta_row, int8_t delta_col)
{
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	d8 2f       	mov	r29, r24
     528:	16 2f       	mov	r17, r22
	// |            Move Player with Push Buttons/Terminal               |
	// +-----------------------------------------------------------------+
	// | 1. Remove the display of the player icon from the current       |
	// |    location.     
	// |      - You may find the function flash_player() useful.  
	player_visible = true; 
     52a:	c1 e0       	ldi	r28, 0x01	; 1
     52c:	c0 93 a2 01 	sts	0x01A2, r28	; 0x8001a2 <player_visible>
	flash_player();   
     530:	0e 94 79 02 	call	0x4f2	; 0x4f2 <flash_player>
	// | 2. Calculate the new location of the player.                    |
	// |      - You may find creating a function for this useful.        |

	/*Calculating new location and not allowing negative numbers*/
	/*Mapping the moves to the location thus using modulus*/
	uint8_t new_player_x = (player_col + (uint8_t)delta_col) % 16;
     534:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <player_col>
     538:	61 0f       	add	r22, r17
     53a:	6f 70       	andi	r22, 0x0F	; 15
	uint8_t new_player_y = (player_row + (uint8_t)delta_row) % 8;
     53c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <player_row>
     540:	8d 0f       	add	r24, r29
     542:	87 70       	andi	r24, 0x07	; 7
	

	// | 3. Update the player location (player_row and player_col).      |
	player_col = new_player_x;
     544:	60 93 a3 01 	sts	0x01A3, r22	; 0x8001a3 <player_col>
	player_row = new_player_y;
     548:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <player_row>
	// | 4. Draw the player icon at the new player location.             |
	// |      - Once again, you may find the function flash_player()     |
	// |        useful.
	player_visible = true;
     54c:	c0 93 a2 01 	sts	0x01A2, r28	; 0x8001a2 <player_visible>
	// |    message area of the terminal and return a valid indicating a |
	// |    valid move.                                                  |
	// +-----------------------------------------------------------------+

	// <YOUR CODE HERE>
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	08 95       	ret

00000558 <is_game_over>:
// returns true iff (if and only if) the game is over.
bool is_game_over(void)
{
	// <YOUR CODE HERE>.
	return false;
}
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	08 95       	ret

0000055c <init_ledmatrix>:
}

void ledmatrix_shift_display_down(void)
{
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     55c:	80 e8       	ldi	r24, 0x80	; 128
     55e:	0e 94 3b 05 	call	0xa76	; 0xa76 <spi_setup_master>
     562:	08 95       	ret

00000564 <ledmatrix_update_pixel>:
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	60 31       	cpi	r22, 0x10	; 16
     56c:	b0 f4       	brcc	.+44     	; 0x59a <ledmatrix_update_pixel+0x36>
     56e:	88 30       	cpi	r24, 0x08	; 8
     570:	a0 f4       	brcc	.+40     	; 0x59a <ledmatrix_update_pixel+0x36>
     572:	14 2f       	mov	r17, r20
     574:	d6 2f       	mov	r29, r22
     576:	c8 2f       	mov	r28, r24
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     57e:	8c 2f       	mov	r24, r28
     580:	87 70       	andi	r24, 0x07	; 7
     582:	20 e1       	ldi	r18, 0x10	; 16
     584:	82 9f       	mul	r24, r18
     586:	c0 01       	movw	r24, r0
     588:	11 24       	eor	r1, r1
     58a:	6d 2f       	mov	r22, r29
     58c:	6f 70       	andi	r22, 0x0F	; 15
     58e:	86 2b       	or	r24, r22
     590:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     594:	81 2f       	mov	r24, r17
     596:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	1f 91       	pop	r17
     5a0:	08 95       	ret

000005a2 <ledmatrix_update_column>:
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	80 31       	cpi	r24, 0x10	; 16
     5aa:	a0 f4       	brcc	.+40     	; 0x5d4 <ledmatrix_update_column+0x32>
     5ac:	8b 01       	movw	r16, r22
     5ae:	c8 2f       	mov	r28, r24
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     5b6:	8c 2f       	mov	r24, r28
     5b8:	8f 70       	andi	r24, 0x0F	; 15
     5ba:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     5be:	c0 e0       	ldi	r28, 0x00	; 0
     5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <ledmatrix_update_column+0x2e>
     5c2:	f8 01       	movw	r30, r16
     5c4:	ec 0f       	add	r30, r28
     5c6:	f1 1d       	adc	r31, r1
     5c8:	80 81       	ld	r24, Z
     5ca:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     5ce:	cf 5f       	subi	r28, 0xFF	; 255
     5d0:	c8 30       	cpi	r28, 0x08	; 8
     5d2:	b8 f3       	brcs	.-18     	; 0x5c2 <ledmatrix_update_column+0x20>
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <ledmatrix_shift_display_left>:
     5dc:	84 e0       	ldi	r24, 0x04	; 4
     5de:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     5e2:	82 e0       	ldi	r24, 0x02	; 2
     5e4:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     5e8:	08 95       	ret

000005ea <ledmatrix_clear>:
}

void ledmatrix_clear(void)
{
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     5ea:	8f e0       	ldi	r24, 0x0F	; 15
     5ec:	0e 94 67 05 	call	0xace	; 0xace <spi_send_byte>
     5f0:	08 95       	ret

000005f2 <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	init_ledmatrix();
     5f2:	0e 94 ae 02 	call	0x55c	; 0x55c <init_ledmatrix>
	init_buttons();
     5f6:	0e 94 83 01 	call	0x306	; 0x306 <init_buttons>
	init_serial_stdio(19200, false);
     5fa:	40 e0       	ldi	r20, 0x00	; 0
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	7b e4       	ldi	r23, 0x4B	; 75
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <init_serial_stdio>
	init_timer0();
     608:	0e 94 6d 07 	call	0xeda	; 0xeda <init_timer0>
	init_timer1();
     60c:	0e 94 b8 07 	call	0xf70	; 0xf70 <init_timer1>
	init_timer2();
     610:	0e 94 bd 07 	call	0xf7a	; 0xf7a <init_timer2>

	// Turn on global interrupts.
	sei();
     614:	78 94       	sei
     616:	08 95       	ret

00000618 <start_screen>:
}

void start_screen(void)
{
	// Hide terminal cursor and set display mode to default.
	hide_cursor();
     618:	0e 94 64 07 	call	0xec8	; 0xec8 <hide_cursor>
	normal_display_mode();
     61c:	0e 94 45 07 	call	0xe8a	; 0xe8a <normal_display_mode>

	// Clear terminal screen and output the title ASCII art.
	clear_terminal();
     620:	0e 94 4e 07 	call	0xe9c	; 0xe9c <clear_terminal>
	display_terminal_title(3, 5);
     624:	65 e0       	ldi	r22, 0x05	; 5
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	0e 94 0b 07 	call	0xe16	; 0xe16 <display_terminal_title>
	move_terminal_cursor(11, 5);
     62c:	65 e0       	ldi	r22, 0x05	; 5
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	8b e0       	ldi	r24, 0x0B	; 11
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 31 07 	call	0xe62	; 0xe62 <move_terminal_cursor>
	// Change this to your name and student number. Remember to remove the
	// chevrons - "<" and ">"!
	printf_P(PSTR("CSSE2010/7201 Project by <YOUR NAME> - <YOUR STUDENT NUMBER>"));
     638:	83 eb       	ldi	r24, 0xB3	; 179
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>

	// Setup the start screen on the LED matrix.
	setup_start_screen();
     644:	0e 94 56 06 	call	0xcac	; 0xcac <setup_start_screen>

	// Clear button presses registered as the result of powering on the
	// I/O board. This is just to work around a minor limitation of the
	// hardware, and is only done here to ensure that the start screen is
	// not skipped when you power cycle the I/O board.
	clear_button_presses();
     648:	0e 94 ba 01 	call	0x374	; 0x374 <clear_button_presses>
     64c:	0f 90       	pop	r0
     64e:	0f 90       	pop	r0
	// Wait until a button is pushed, or 's'/'S' is entered.
	while (1)
	{
		// Check for button presses. If any button is pressed, exit
		// the start screen by breaking out of this infinite loop.
		if (button_pushed() != NO_BUTTON_PUSHED)
     650:	0e 94 95 01 	call	0x32a	; 0x32a <button_pushed>
     654:	8f 3f       	cpi	r24, 0xFF	; 255
     656:	99 f4       	brne	.+38     	; 0x67e <start_screen+0x66>
		{
			break;
		}

		// No button was pressed, check if we have terminal inputs.
		if (serial_input_available())
     658:	0e 94 2f 05 	call	0xa5e	; 0xa5e <serial_input_available>
     65c:	88 23       	and	r24, r24
     65e:	61 f0       	breq	.+24     	; 0x678 <start_screen+0x60>
		{
			// Terminal input is available, get the character.
			int serial_input = fgetc(stdin);
     660:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <__iob>
     664:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <__iob+0x1>
     668:	0e 94 43 08 	call	0x1086	; 0x1086 <fgetc>

			// If the input is 's'/'S', exit the start screen by
			// breaking out of this loop.
			if (serial_input == 's' || serial_input == 'S')
     66c:	83 37       	cpi	r24, 0x73	; 115
     66e:	91 05       	cpc	r25, r1
     670:	31 f0       	breq	.+12     	; 0x67e <start_screen+0x66>
     672:	83 35       	cpi	r24, 0x53	; 83
     674:	91 05       	cpc	r25, r1
     676:	19 f0       	breq	.+6      	; 0x67e <start_screen+0x66>
		}

		// No button presses and no 's'/'S' typed into the terminal,
		// we will loop back and do the checks again. We also update
		// the start screen animation on the LED matrix here.
		update_start_screen();
     678:	0e 94 60 06 	call	0xcc0	; 0xcc0 <update_start_screen>
	}
     67c:	e9 cf       	rjmp	.-46     	; 0x650 <start_screen+0x38>
     67e:	08 95       	ret

00000680 <new_game>:
}

void new_game(void)
{
	// Clear the serial terminal.
	hide_cursor();
     680:	0e 94 64 07 	call	0xec8	; 0xec8 <hide_cursor>
	clear_terminal();
     684:	0e 94 4e 07 	call	0xe9c	; 0xe9c <clear_terminal>

	// Initialise the game and display.
	initialise_game();
     688:	0e 94 33 02 	call	0x466	; 0x466 <initialise_game>

	// Clear all button presses and serial inputs, so that potentially
	// buffered inputs aren't going to make it to the new game.
	clear_button_presses();
     68c:	0e 94 ba 01 	call	0x374	; 0x374 <clear_button_presses>
	clear_serial_input_buffer();
     690:	0e 94 36 05 	call	0xa6c	; 0xa6c <clear_serial_input_buffer>
     694:	08 95       	ret

00000696 <play_game>:
}

void play_game(void)
{
     696:	8f 92       	push	r8
     698:	9f 92       	push	r9
     69a:	af 92       	push	r10
     69c:	bf 92       	push	r11
     69e:	cf 92       	push	r12
     6a0:	df 92       	push	r13
     6a2:	ef 92       	push	r14
     6a4:	ff 92       	push	r15
	uint32_t last_flash_time = get_current_time();
     6a6:	0e 94 83 07 	call	0xf06	; 0xf06 <get_current_time>
     6aa:	4b 01       	movw	r8, r22
     6ac:	5c 01       	movw	r10, r24

	// We play the game until it's over.
	while (!is_game_over())
     6ae:	37 c0       	rjmp	.+110    	; 0x71e <play_game+0x88>
	{
		// We need to check if any buttons have been pushed, this will
		// be NO_BUTTON_PUSHED if no button has been pushed. If button
		// 0 has been pushed, we get BUTTON0_PUSHED, and likewise, if
		// button 1 has been pushed, we get BUTTON1_PUSHED, and so on.
		ButtonState btn = button_pushed();
     6b0:	0e 94 95 01 	call	0x32a	; 0x32a <button_pushed>

		

		if (btn == BUTTON0_PUSHED)
     6b4:	81 11       	cpse	r24, r1
     6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <play_game+0x2e>
		{
			// Move the player, see move_player(...) in game.c.
			// Also remember to reset the flash cycle here.
			// mobe_player(y, x)
			move_player(0, 1);
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	0e 94 90 02 	call	0x520	; 0x520 <move_player>
			flash_player();
     6be:	0e 94 79 02 	call	0x4f2	; 0x4f2 <flash_player>
     6c2:	1a c0       	rjmp	.+52     	; 0x6f8 <play_game+0x62>
		// Now, repeat for the other buttons, and combine with serial
		// inputs.

		/*USE SWITCH STATEMENT HERE*/

		else if (btn == BUTTON1_PUSHED){
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	39 f4       	brne	.+14     	; 0x6d6 <play_game+0x40>
			/*move the player down*/
			move_player(-1, 0);
     6c8:	60 e0       	ldi	r22, 0x00	; 0
     6ca:	8f ef       	ldi	r24, 0xFF	; 255
     6cc:	0e 94 90 02 	call	0x520	; 0x520 <move_player>
			flash_player();
     6d0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <flash_player>
     6d4:	11 c0       	rjmp	.+34     	; 0x6f8 <play_game+0x62>
		}
		else if (btn == BUTTON2_PUSHED){
     6d6:	82 30       	cpi	r24, 0x02	; 2
     6d8:	39 f4       	brne	.+14     	; 0x6e8 <play_game+0x52>
			/*move the player UP*/
			move_player(1,0);
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 90 02 	call	0x520	; 0x520 <move_player>
			flash_player();
     6e2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <flash_player>
     6e6:	08 c0       	rjmp	.+16     	; 0x6f8 <play_game+0x62>
			}
		else if (btn == BUTTON3_PUSHED){
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	31 f4       	brne	.+12     	; 0x6f8 <play_game+0x62>
			/*move the player LEFT*/
			move_player(0,-1);
     6ec:	6f ef       	ldi	r22, 0xFF	; 255
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 90 02 	call	0x520	; 0x520 <move_player>
			flash_player();
     6f4:	0e 94 79 02 	call	0x4f2	; 0x4f2 <flash_player>
			}

		uint32_t current_time = get_current_time();
     6f8:	0e 94 83 07 	call	0xf06	; 0xf06 <get_current_time>
     6fc:	6b 01       	movw	r12, r22
     6fe:	7c 01       	movw	r14, r24
		if (current_time >= last_flash_time + 200)
     700:	d5 01       	movw	r26, r10
     702:	c4 01       	movw	r24, r8
     704:	88 53       	subi	r24, 0x38	; 56
     706:	9f 4f       	sbci	r25, 0xFF	; 255
     708:	af 4f       	sbci	r26, 0xFF	; 255
     70a:	bf 4f       	sbci	r27, 0xFF	; 255
     70c:	c8 16       	cp	r12, r24
     70e:	d9 06       	cpc	r13, r25
     710:	ea 06       	cpc	r14, r26
     712:	fb 06       	cpc	r15, r27
     714:	20 f0       	brcs	.+8      	; 0x71e <play_game+0x88>
		{
			// 200ms (0.2 seconds) has passed since the last time
			// we flashed the player icon, flash it now.
			flash_player();
     716:	0e 94 79 02 	call	0x4f2	; 0x4f2 <flash_player>

			// Update the most recent icon flash time.
			last_flash_time = current_time;
     71a:	46 01       	movw	r8, r12
     71c:	57 01       	movw	r10, r14
void play_game(void)
{
	uint32_t last_flash_time = get_current_time();

	// We play the game until it's over.
	while (!is_game_over())
     71e:	0e 94 ac 02 	call	0x558	; 0x558 <is_game_over>
     722:	88 23       	and	r24, r24
     724:	29 f2       	breq	.-118    	; 0x6b0 <play_game+0x1a>
			// Update the most recent icon flash time.
			last_flash_time = current_time;
		}
	}
	// We get here if the game is over.
}
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	bf 90       	pop	r11
     730:	af 90       	pop	r10
     732:	9f 90       	pop	r9
     734:	8f 90       	pop	r8
     736:	08 95       	ret

00000738 <handle_game_over>:

void handle_game_over(void)
{
	move_terminal_cursor(14, 10);
     738:	6a e0       	ldi	r22, 0x0A	; 10
     73a:	70 e0       	ldi	r23, 0x00	; 0
     73c:	8e e0       	ldi	r24, 0x0E	; 14
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	0e 94 31 07 	call	0xe62	; 0xe62 <move_terminal_cursor>
	printf_P(PSTR("GAME OVER"));
     744:	89 ea       	ldi	r24, 0xA9	; 169
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
	move_terminal_cursor(15, 10);
     750:	6a e0       	ldi	r22, 0x0A	; 10
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	8f e0       	ldi	r24, 0x0F	; 15
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 31 07 	call	0xe62	; 0xe62 <move_terminal_cursor>
	printf_P(PSTR("Press 'r'/'R' to restart, or 'e'/'E' to exit"));
     75c:	8c e7       	ldi	r24, 0x7C	; 124
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
	while (1)
	{
		// Get serial input. If no serial input is ready, serial_input
		// would be -1 (not a valid character).
		int serial_input = -1;
		if (serial_input_available())
     770:	0e 94 2f 05 	call	0xa5e	; 0xa5e <serial_input_available>
     774:	88 23       	and	r24, r24
     776:	e1 f3       	breq	.-8      	; 0x770 <handle_game_over+0x38>
		{
			serial_input = fgetc(stdin);
     778:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <__iob>
     77c:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <__iob+0x1>
     780:	0e 94 43 08 	call	0x1086	; 0x1086 <fgetc>
		{
			// <YOUR CODE HERE>
		}
		// Now check for other possible inputs.
		
	}
     784:	f5 cf       	rjmp	.-22     	; 0x770 <handle_game_over+0x38>

00000786 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and callbacks. This will turn on interrupts.
	initialise_hardware();
     786:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <initialise_hardware>

	// Show the start screen. Returns when the player starts the game.
	start_screen();
     78a:	0e 94 0c 03 	call	0x618	; 0x618 <start_screen>

	// Loop forever and continuously play the game.
	while (1)
	{
		new_game();
     78e:	0e 94 40 03 	call	0x680	; 0x680 <new_game>
		play_game();
     792:	0e 94 4b 03 	call	0x696	; 0x696 <play_game>
		handle_game_over();
     796:	0e 94 9c 03 	call	0x738	; 0x738 <handle_game_over>

0000079a <uart_put_char>:
// Variable to keep track of whether incoming characters are to be echoed
// back or not.
static bool do_echo;

static int uart_put_char(char c, FILE *stream)
{
     79a:	cf 93       	push	r28
     79c:	c8 2f       	mov	r28, r24
	// Add the character to the buffer for transmission (if there is space
	// to do so). If not we wait until the buffer has space.

	// If the character is linefeed, we output carriage return.
	if (c == '\n')
     79e:	8a 30       	cpi	r24, 0x0A	; 10
     7a0:	19 f4       	brne	.+6      	; 0x7a8 <uart_put_char+0xe>
	{
		uart_put_char('\r', stream);
     7a2:	8d e0       	ldi	r24, 0x0D	; 13
     7a4:	0e 94 cd 03 	call	0x79a	; 0x79a <uart_put_char>
	// we don't output the character since the buffer will never be
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
     7a8:	9f b7       	in	r25, 0x3f	; 63
     7aa:	90 78       	andi	r25, 0x80	; 128
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <uart_put_char+0x18>
	{
		if (!interrupts_enabled)
     7ae:	99 23       	and	r25, r25
     7b0:	29 f1       	breq	.+74     	; 0x7fc <uart_put_char+0x62>
	// emptied if interrupts are disabled. If the buffer is full and
	// interrupts are enabled, then we loop until the buffer has enough
	// space. The bytes_in_buffer variable will get modified by the ISR
	// which extracts bytes from the buffer.
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
     7b2:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     7b6:	8f 3f       	cpi	r24, 0xFF	; 255
     7b8:	d1 f3       	breq	.-12     	; 0x7ae <uart_put_char+0x14>
	// If this is beyond the end of the buffer, we wrap around back to the
	// beginning of the buffer. NOTE: We disable interrupts before
	// modifying the buffer. This prevents the ISR from modifying the
	// buffer at the same time. We reenable them if they were enabled when
	// we entered the function.
	cli();
     7ba:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
     7bc:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <out_insert_pos>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	8e 0f       	add	r24, r30
     7c4:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <out_insert_pos>
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	e8 5c       	subi	r30, 0xC8	; 200
     7cc:	fd 4f       	sbci	r31, 0xFD	; 253
     7ce:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
     7d0:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <bytes_in_out_buffer>
	if (out_insert_pos == OUTPUT_BUFFER_SIZE)
     7da:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <out_insert_pos>
     7de:	8f 3f       	cpi	r24, 0xFF	; 255
     7e0:	11 f4       	brne	.+4      	; 0x7e6 <uart_put_char+0x4c>
	{
		// Wrap around buffer pointer if necessary.
		out_insert_pos = 0;
     7e2:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <out_insert_pos>
	}

	// Reenable interrupts (UDR Empty interrupt may have been disabled) -
	// we ensure it is now enabled so that it will fire and deal with the
	// next character in the buffer.
	UCSR0B |= (1 << UDRIE0);
     7e6:	e1 ec       	ldi	r30, 0xC1	; 193
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	80 62       	ori	r24, 0x20	; 32
     7ee:	80 83       	st	Z, r24
	if (interrupts_enabled)
     7f0:	99 23       	and	r25, r25
     7f2:	39 f0       	breq	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		sei();
     7f4:	78 94       	sei
	}
	return 0;
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	05 c0       	rjmp	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	bool interrupts_enabled = bit_is_set(SREG, SREG_I);
	while (bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE)
	{
		if (!interrupts_enabled)
		{
			return 1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	UCSR0B |= (1 << UDRIE0);
	if (interrupts_enabled)
	{
		sei();
	}
	return 0;
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
}
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <uart_get_char>:

static int uart_get_char(FILE *stream)
{
	// Wait until we've received a character.
	while (bytes_in_input_buffer == 0)
     80a:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <bytes_in_input_buffer>
     80e:	88 23       	and	r24, r24
     810:	e1 f3       	breq	.-8      	; 0x80a <uart_get_char>

	// Turn interrupts off and remove a character from the input buffer.
	// We reenable interrupts if they were on. The pending character is
	// the one which is byte_in_input_buffer characters before the insert
	// position (taking into account that we may need to wrap around).
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
     812:	2f b7       	in	r18, 0x3f	; 63
     814:	20 78       	andi	r18, 0x80	; 128
	cli();
     816:	f8 94       	cli
	char c;
	if (input_insert_pos - bytes_in_input_buffer < 0)
     818:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <input_insert_pos>
     81c:	30 91 49 03 	lds	r19, 0x0349	; 0x800349 <bytes_in_input_buffer>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	83 1b       	sub	r24, r19
     824:	91 09       	sbc	r25, r1
     826:	5a f4       	brpl	.+22     	; 0x83e <uart_get_char+0x34>
	{
		// Need to wrap around.
		c = input_buffer[input_insert_pos - bytes_in_input_buffer +
     828:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <input_insert_pos>
     82c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <bytes_in_input_buffer>
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	e8 1b       	sub	r30, r24
     834:	f1 09       	sbc	r31, r1
     836:	e8 5b       	subi	r30, 0xB8	; 184
     838:	fc 4f       	sbci	r31, 0xFC	; 252
     83a:	80 81       	ld	r24, Z
     83c:	0a c0       	rjmp	.+20     	; 0x852 <uart_get_char+0x48>
			INPUT_BUFFER_SIZE];
	}
	else
	{
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
     83e:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <input_insert_pos>
     842:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <bytes_in_input_buffer>
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	e8 1b       	sub	r30, r24
     84a:	f1 09       	sbc	r31, r1
     84c:	e8 5c       	subi	r30, 0xC8	; 200
     84e:	fc 4f       	sbci	r31, 0xFC	; 252
     850:	80 81       	ld	r24, Z
	}

	// Decrement our count of bytes in the input buffer.
	bytes_in_input_buffer--;
     852:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <bytes_in_input_buffer>
     856:	91 50       	subi	r25, 0x01	; 1
     858:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <bytes_in_input_buffer>
	if (interrupts_enabled)
     85c:	22 23       	and	r18, r18
     85e:	09 f0       	breq	.+2      	; 0x862 <uart_get_char+0x58>
	{
		sei();
     860:	78 94       	sei
	// as WASD. If you're a student reading this, pretend you didn't see
	// it XD. Honestly, you cannot rely on the arrow keys to work like
	// WASD, this is what we call undocumented behaviour.
	static char first = 0;
	static char second = 0;
	if (first == 0x1B && second == '[')
     862:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <first.1835>
     866:	9b 31       	cpi	r25, 0x1B	; 27
     868:	b1 f4       	brne	.+44     	; 0x896 <uart_get_char+0x8c>
     86a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <second.1836>
     86e:	9b 35       	cpi	r25, 0x5B	; 91
     870:	91 f4       	brne	.+36     	; 0x896 <uart_get_char+0x8c>
	{
		switch (c)
     872:	82 34       	cpi	r24, 0x42	; 66
     874:	49 f0       	breq	.+18     	; 0x888 <uart_get_char+0x7e>
     876:	18 f4       	brcc	.+6      	; 0x87e <uart_get_char+0x74>
     878:	81 34       	cpi	r24, 0x41	; 65
     87a:	61 f0       	breq	.+24     	; 0x894 <uart_get_char+0x8a>
     87c:	0c c0       	rjmp	.+24     	; 0x896 <uart_get_char+0x8c>
     87e:	83 34       	cpi	r24, 0x43	; 67
     880:	29 f0       	breq	.+10     	; 0x88c <uart_get_char+0x82>
     882:	84 34       	cpi	r24, 0x44	; 68
     884:	29 f0       	breq	.+10     	; 0x890 <uart_get_char+0x86>
     886:	07 c0       	rjmp	.+14     	; 0x896 <uart_get_char+0x8c>
		{
			case 'A':
				c = 'w';
				break;
			case 'B':
				c = 's';
     888:	83 e7       	ldi	r24, 0x73	; 115
				break;
     88a:	05 c0       	rjmp	.+10     	; 0x896 <uart_get_char+0x8c>
			case 'C':
				c = 'd';
     88c:	84 e6       	ldi	r24, 0x64	; 100
				break;
     88e:	03 c0       	rjmp	.+6      	; 0x896 <uart_get_char+0x8c>
			case 'D':
				c = 'a';
     890:	81 e6       	ldi	r24, 0x61	; 97
				break;
     892:	01 c0       	rjmp	.+2      	; 0x896 <uart_get_char+0x8c>
	if (first == 0x1B && second == '[')
	{
		switch (c)
		{
			case 'A':
				c = 'w';
     894:	87 e7       	ldi	r24, 0x77	; 119
				break;
			default:
				break;
		}
	}
	first = second;
     896:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <second.1836>
     89a:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <first.1835>
	second = c;
     89e:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <second.1836>

	return c;
}
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	08 95       	ret

000008a6 <__vector_21>:
	_FDEV_SETUP_RW);

// Interrupt handler for UART Data Register Empty (i.e., another character
// can be taken from our buffer and written out).
ISR(USART0_UDRE_vect)
{
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	2f 93       	push	r18
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	ef 93       	push	r30
     8b8:	ff 93       	push	r31
	// Check if we have data in our buffer.
	if (bytes_in_out_buffer > 0)
     8ba:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     8be:	88 23       	and	r24, r24
     8c0:	29 f1       	breq	.+74     	; 0x90c <__stack+0xd>
		// UART. The pending byte (character) is the one which is
		// bytes_in_buffer characters before the insert_pos (taking
		// into account that we may need to wrap around to the end of
		// the buffer).
		char c;
		if (out_insert_pos - bytes_in_out_buffer < 0)
     8c2:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <out_insert_pos>
     8c6:	20 91 37 02 	lds	r18, 0x0237	; 0x800237 <bytes_in_out_buffer>
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	82 1b       	sub	r24, r18
     8ce:	91 09       	sbc	r25, r1
     8d0:	5a f4       	brpl	.+22     	; 0x8e8 <__vector_21+0x42>
		{
			// Need to wrap around.
			c = out_buffer[out_insert_pos - bytes_in_out_buffer +
     8d2:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <out_insert_pos>
     8d6:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	e8 1b       	sub	r30, r24
     8de:	f1 09       	sbc	r31, r1
     8e0:	e9 5c       	subi	r30, 0xC9	; 201
     8e2:	fc 4f       	sbci	r31, 0xFC	; 252
     8e4:	90 81       	ld	r25, Z
     8e6:	0a c0       	rjmp	.+20     	; 0x8fc <__vector_21+0x56>
				OUTPUT_BUFFER_SIZE];
		}
		else
		{
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
     8e8:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <out_insert_pos>
     8ec:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	e8 1b       	sub	r30, r24
     8f4:	f1 09       	sbc	r31, r1
     8f6:	e8 5c       	subi	r30, 0xC8	; 200
     8f8:	fd 4f       	sbci	r31, 0xFD	; 253
     8fa:	90 81       	ld	r25, Z
		}

		// Decrement our count of the number of bytes in the buffer.
		bytes_in_out_buffer--;
     8fc:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     900:	81 50       	subi	r24, 0x01	; 1
     902:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <bytes_in_out_buffer>

		// Output the character via the UART.
		UDR0 = c;
     906:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     90a:	05 c0       	rjmp	.+10     	; 0x916 <__stack+0x17>
	{
		// No data in the buffer. We disable the UART Data Register
		// Empty interrupt because otherwise it will trigger again
		// immediately when this ISR exits. The interrupt is reenabled
		// when a character is placed in the buffer.
		UCSR0B &= ~(1 << UDRIE0);
     90c:	e1 ec       	ldi	r30, 0xC1	; 193
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	8f 7d       	andi	r24, 0xDF	; 223
     914:	80 83       	st	Z, r24
	}
}
     916:	ff 91       	pop	r31
     918:	ef 91       	pop	r30
     91a:	9f 91       	pop	r25
     91c:	8f 91       	pop	r24
     91e:	2f 91       	pop	r18
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <__vector_20>:

// Interrupt handler for UART Receive Complete (i.e., can read a character).
// The character is read and placed in the input buffer.
ISR(USART0_RX_vect)
{
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	4f 93       	push	r20
     93a:	5f 93       	push	r21
     93c:	6f 93       	push	r22
     93e:	7f 93       	push	r23
     940:	8f 93       	push	r24
     942:	9f 93       	push	r25
     944:	af 93       	push	r26
     946:	bf 93       	push	r27
     948:	cf 93       	push	r28
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
	// Read the character - we ignore the possibility of overrun.
	char c = UDR0;
     94e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	if (do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE)
     952:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <do_echo>
     956:	88 23       	and	r24, r24
     958:	49 f0       	breq	.+18     	; 0x96c <__vector_20+0x42>
     95a:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <bytes_in_out_buffer>
     95e:	8f 3f       	cpi	r24, 0xFF	; 255
     960:	29 f0       	breq	.+10     	; 0x96c <__vector_20+0x42>
	{
		// If echoing is enabled and there is output buffer space,
		// echo the received character back to the UART. If there
		// is no output buffer space, characters will be lost.
		uart_put_char(c, 0);
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	8c 2f       	mov	r24, r28
     968:	0e 94 cd 03 	call	0x79a	; 0x79a <uart_put_char>
	}

	// Check if we have space in our buffer. If not, set the overrun flag
	// and throw away the character. We never clear the overrun flag -
	// it's up to the programmer to check/clear this flag if desired.
	if (bytes_in_input_buffer >= INPUT_BUFFER_SIZE)
     96c:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <bytes_in_input_buffer>
     970:	80 31       	cpi	r24, 0x10	; 16
     972:	20 f0       	brcs	.+8      	; 0x97c <__vector_20+0x52>
	{
		input_overrun = 1;
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <input_overrun>
     97a:	18 c0       	rjmp	.+48     	; 0x9ac <__vector_20+0x82>
	}
	else
	{
		// If the character is carriage return, turn it into linefeed.
		if (c == '\r')
     97c:	cd 30       	cpi	r28, 0x0D	; 13
     97e:	09 f4       	brne	.+2      	; 0x982 <__vector_20+0x58>
		{
			c = '\n';
     980:	ca e0       	ldi	r28, 0x0A	; 10
		}

		// There is room in the input buffer.
		input_buffer[input_insert_pos++] = c;
     982:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <input_insert_pos>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	8e 0f       	add	r24, r30
     98a:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <input_insert_pos>
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	e8 5c       	subi	r30, 0xC8	; 200
     992:	fc 4f       	sbci	r31, 0xFC	; 252
     994:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
     996:	80 91 49 03 	lds	r24, 0x0349	; 0x800349 <bytes_in_input_buffer>
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <bytes_in_input_buffer>
		if (input_insert_pos == INPUT_BUFFER_SIZE)
     9a0:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <input_insert_pos>
     9a4:	80 31       	cpi	r24, 0x10	; 16
     9a6:	11 f4       	brne	.+4      	; 0x9ac <__vector_20+0x82>
		{
			// Wrap around buffer pointer if necessary.
			input_insert_pos = 0;
     9a8:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <input_insert_pos>
		}
	}
}
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	cf 91       	pop	r28
     9b2:	bf 91       	pop	r27
     9b4:	af 91       	pop	r26
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	7f 91       	pop	r23
     9bc:	6f 91       	pop	r22
     9be:	5f 91       	pop	r21
     9c0:	4f 91       	pop	r20
     9c2:	3f 91       	pop	r19
     9c4:	2f 91       	pop	r18
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <init_serial_stdio>:

void init_serial_stdio(long baudrate, bool echo)
{
	// Initialise our buffers.
	out_insert_pos = 0;
     9d0:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <out_insert_pos>
	bytes_in_out_buffer = 0;
     9d4:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <bytes_in_out_buffer>
	input_insert_pos = 0;
     9d8:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <input_insert_pos>
	bytes_in_input_buffer = 0;
     9dc:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <bytes_in_input_buffer>
	input_overrun = 0;
     9e0:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <input_overrun>

	// Record whether we're going to echo characters or not.
	do_echo = echo;
     9e4:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <do_echo>

	// Configure the baud rate. This differs from the datasheet formula so
	// that we get rounding to the nearest integer while using integer
	// division (which truncates).
	UBRR0 = (uint16_t)((((SYSCLK / (8 * baudrate)) + 1) / 2) - 1);
     9e8:	dc 01       	movw	r26, r24
     9ea:	cb 01       	movw	r24, r22
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	aa 1f       	adc	r26, r26
     9f2:	bb 1f       	adc	r27, r27
     9f4:	88 0f       	add	r24, r24
     9f6:	99 1f       	adc	r25, r25
     9f8:	aa 1f       	adc	r26, r26
     9fa:	bb 1f       	adc	r27, r27
     9fc:	9c 01       	movw	r18, r24
     9fe:	ad 01       	movw	r20, r26
     a00:	22 0f       	add	r18, r18
     a02:	33 1f       	adc	r19, r19
     a04:	44 1f       	adc	r20, r20
     a06:	55 1f       	adc	r21, r21
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	72 e1       	ldi	r23, 0x12	; 18
     a0c:	8a e7       	ldi	r24, 0x7A	; 122
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	0e 94 c0 07 	call	0xf80	; 0xf80 <__divmodsi4>
     a14:	ba 01       	movw	r22, r20
     a16:	a9 01       	movw	r20, r18
     a18:	4f 5f       	subi	r20, 0xFF	; 255
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	6f 4f       	sbci	r22, 0xFF	; 255
     a1e:	7f 4f       	sbci	r23, 0xFF	; 255
     a20:	db 01       	movw	r26, r22
     a22:	ca 01       	movw	r24, r20
     a24:	1a f4       	brpl	.+6      	; 0xa2c <init_serial_stdio+0x5c>
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	a1 1d       	adc	r26, r1
     a2a:	b1 1d       	adc	r27, r1
     a2c:	b5 95       	asr	r27
     a2e:	a7 95       	ror	r26
     a30:	97 95       	ror	r25
     a32:	87 95       	ror	r24
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     a3a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Enable transmission and receiving via UART. We don't enable the UDR
	// empty interrupt here (we wait until we've got a character to
	// transmit). NOTE: Interrupts must be enabled globally for this
	// module to work, but we do not do this here.
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     a3e:	e1 ec       	ldi	r30, 0xC1	; 193
     a40:	f0 e0       	ldi	r31, 0x00	; 0
     a42:	88 e1       	ldi	r24, 0x18	; 24
     a44:	80 83       	st	Z, r24

	// Enable receive complete interrupt.
	UCSR0B |= (1 << RXCIE0);
     a46:	80 81       	ld	r24, Z
     a48:	80 68       	ori	r24, 0x80	; 128
     a4a:	80 83       	st	Z, r24

	// Set up our stream so the get and put functions are used to
	// read/write characters via the serial port when we use stdio
	// functions.
	stdout = &serialio;
     a4c:	ea e4       	ldi	r30, 0x4A	; 74
     a4e:	f3 e0       	ldi	r31, 0x03	; 3
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	91 e0       	ldi	r25, 0x01	; 1
     a54:	93 83       	std	Z+3, r25	; 0x03
     a56:	82 83       	std	Z+2, r24	; 0x02
	stdin = &serialio;
     a58:	91 83       	std	Z+1, r25	; 0x01
     a5a:	80 83       	st	Z, r24
     a5c:	08 95       	ret

00000a5e <serial_input_available>:
}

bool serial_input_available(void)
{
	return bytes_in_input_buffer != 0;
     a5e:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <bytes_in_input_buffer>
     a62:	81 e0       	ldi	r24, 0x01	; 1
     a64:	91 11       	cpse	r25, r1
     a66:	01 c0       	rjmp	.+2      	; 0xa6a <serial_input_available+0xc>
     a68:	80 e0       	ldi	r24, 0x00	; 0
}
     a6a:	08 95       	ret

00000a6c <clear_serial_input_buffer>:

void clear_serial_input_buffer(void)
{
	// Just adjust our buffer data so it looks empty.
	input_insert_pos = 0;
     a6c:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <input_insert_pos>
	bytes_in_input_buffer = 0;
     a70:	10 92 49 03 	sts	0x0349, r1	; 0x800349 <bytes_in_input_buffer>
     a74:	08 95       	ret

00000a76 <spi_setup_master>:

void spi_setup_master(uint8_t clockdivider)
{
	// Make the SS, MOSI and SCK pins outputs. These are pins 4, 5 and 7
	// of port B on the ATmega324A.
	DDRB |= (1 << DDB7) | (1 << DDB5) | (1 << DDB4);
     a76:	94 b1       	in	r25, 0x04	; 4
     a78:	90 6b       	ori	r25, 0xB0	; 176
     a7a:	94 b9       	out	0x04, r25	; 4

	// Set the slave select (SS) line high.
	PORTB |= (1 << PORTB4);
     a7c:	95 b1       	in	r25, 0x05	; 5
     a7e:	90 61       	ori	r25, 0x10	; 16
     a80:	95 b9       	out	0x05, r25	; 5
	
	// Set up the SPI control registers SPCR and SPSR. Enable SPI as use
	// Master Mode by setting the SPE and MSTR bits of SPCR0.
	SPCR0 = (1 << SPE0) | (1 << MSTR0);
     a82:	90 e5       	ldi	r25, 0x50	; 80
     a84:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR0 and SPR1 bits in SPCR and SPI2X bit in SPSR based on the
	// given clock divider. Invalid values default to the slowest speed.
	// We consider each bit in turn.
	switch (clockdivider)
     a86:	88 30       	cpi	r24, 0x08	; 8
     a88:	21 f0       	breq	.+8      	; 0xa92 <spi_setup_master+0x1c>
     a8a:	80 32       	cpi	r24, 0x20	; 32
     a8c:	11 f0       	breq	.+4      	; 0xa92 <spi_setup_master+0x1c>
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	19 f4       	brne	.+6      	; 0xa98 <spi_setup_master+0x22>
	{
		case 2: // Fallthrough.
		case 8: // Fallthrough.
		case 32:
			SPSR0 = (1 << SPI2X0);
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9d bd       	out	0x2d, r25	; 45
			break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <spi_setup_master+0x24>
		default:
			SPSR0 = 0;
     a98:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch (clockdivider)
     a9a:	80 32       	cpi	r24, 0x20	; 32
     a9c:	69 f0       	breq	.+26     	; 0xab8 <spi_setup_master+0x42>
     a9e:	28 f4       	brcc	.+10     	; 0xaaa <spi_setup_master+0x34>
     aa0:	88 30       	cpi	r24, 0x08	; 8
     aa2:	71 f0       	breq	.+28     	; 0xac0 <spi_setup_master+0x4a>
     aa4:	80 31       	cpi	r24, 0x10	; 16
     aa6:	61 f0       	breq	.+24     	; 0xac0 <spi_setup_master+0x4a>
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <spi_setup_master+0x50>
     aaa:	80 34       	cpi	r24, 0x40	; 64
     aac:	29 f0       	breq	.+10     	; 0xab8 <spi_setup_master+0x42>
     aae:	80 38       	cpi	r24, 0x80	; 128
     ab0:	51 f4       	brne	.+20     	; 0xac6 <spi_setup_master+0x50>
	{
		case 128:
			SPCR0 |= (1 << SPR00);
     ab2:	8c b5       	in	r24, 0x2c	; 44
     ab4:	81 60       	ori	r24, 0x01	; 1
     ab6:	8c bd       	out	0x2c, r24	; 44
			// Fallthrough.
		case 32: // Fallthrough.
		case 64:
			SPCR0 |= (1 << SPR10);
     ab8:	8c b5       	in	r24, 0x2c	; 44
     aba:	82 60       	ori	r24, 0x02	; 2
     abc:	8c bd       	out	0x2c, r24	; 44
			break;
     abe:	03 c0       	rjmp	.+6      	; 0xac6 <spi_setup_master+0x50>
		case 8: // Fallthrough.
		case 16:
			SPCR0 |= (1 << SPR00);
     ac0:	8c b5       	in	r24, 0x2c	; 44
     ac2:	81 60       	ori	r24, 0x01	; 1
     ac4:	8c bd       	out	0x2c, r24	; 44
			break;
	}

	// Take SS (slave select) line low.
	PORTB &= ~(1 << PORTB4);
     ac6:	85 b1       	in	r24, 0x05	; 5
     ac8:	8f 7e       	andi	r24, 0xEF	; 239
     aca:	85 b9       	out	0x05, r24	; 5
     acc:	08 95       	ret

00000ace <spi_send_byte>:
	// transfer. We then wait until the most significant bit of SPSR0
	// (SPIF0) is set - this indicates that the transfer is complete. The
	// final read of SPSR0 followed by a read of SPDR0 will cause the SPIF
	// bit to be reset to 0. See page 173 of the ATmega324A datasheet for
	// more info.
	SPDR0 = byte;
     ace:	8e bd       	out	0x2e, r24	; 46
	while ((SPSR0 & (1 << SPIF0)) == 0)
     ad0:	0d b4       	in	r0, 0x2d	; 45
     ad2:	07 fe       	sbrs	r0, 7
     ad4:	fd cf       	rjmp	.-6      	; 0xad0 <spi_send_byte+0x2>
	{
		; // Wait.
	}
	return SPDR0;
     ad6:	8e b5       	in	r24, 0x2e	; 46
}
     ad8:	08 95       	ret

00000ada <display_initial_image>:
// Macro for getting next column number.
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	cd b7       	in	r28, 0x3d	; 61
     ae2:	de b7       	in	r29, 0x3e	; 62
     ae4:	28 97       	sbiw	r28, 0x08	; 8
     ae6:	0f b6       	in	r0, 0x3f	; 63
     ae8:	f8 94       	cli
     aea:	de bf       	out	0x3e, r29	; 62
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	cd bf       	out	0x3d, r28	; 61
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
     af0:	10 e0       	ldi	r17, 0x00	; 0
     af2:	17 c0       	rjmp	.+46     	; 0xb22 <display_initial_image+0x48>
		countof(anim_data)); col++)
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
     af4:	61 2f       	mov	r22, r17
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	66 0f       	add	r22, r22
     afa:	77 1f       	adc	r23, r23
     afc:	66 0f       	add	r22, r22
     afe:	77 1f       	adc	r23, r23
     b00:	66 0f       	add	r22, r22
     b02:	77 1f       	adc	r23, r23
     b04:	68 5e       	subi	r22, 0xE8	; 232
     b06:	7e 4f       	sbci	r23, 0xFE	; 254
     b08:	48 e0       	ldi	r20, 0x08	; 8
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	ce 01       	movw	r24, r28
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	0e 94 3a 08 	call	0x1074	; 0x1074 <memcpy_P>
		ledmatrix_update_column(col, column_data);
     b14:	be 01       	movw	r22, r28
     b16:	6f 5f       	subi	r22, 0xFF	; 255
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
     b1a:	81 2f       	mov	r24, r17
     b1c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <ledmatrix_update_column>

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
		countof(anim_data)); col++)
     b20:	1f 5f       	subi	r17, 0xFF	; 255
#define GET_NEXT_COLUMN(x, d) (((x) + 1) % countof((d)))

// Displays the initial image of the start screen.
static void display_initial_image(void)
{
	for (uint8_t col = 0; col < min(MATRIX_NUM_COLUMNS,
     b22:	10 31       	cpi	r17, 0x10	; 16
     b24:	38 f3       	brcs	.-50     	; 0xaf4 <display_initial_image+0x1a>
	{
		MatrixColumn column_data;
		memcpy_P(column_data, &anim_data[col], sizeof(column_data));
		ledmatrix_update_column(col, column_data);
	}
}
     b26:	28 96       	adiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	08 95       	ret

00000b3a <display_next_column>:

// Displays the next column of the start screen.
static void display_next_column(void)
{
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	28 97       	sbiw	r28, 0x08	; 8
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	ledmatrix_shift_display_left();
     b4e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <ledmatrix_shift_display_left>
	MatrixColumn column_data;
	memcpy_P(column_data, &anim_data[next_column], sizeof(column_data));
     b52:	60 91 28 02 	lds	r22, 0x0228	; 0x800228 <next_column>
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	66 0f       	add	r22, r22
     b5a:	77 1f       	adc	r23, r23
     b5c:	66 0f       	add	r22, r22
     b5e:	77 1f       	adc	r23, r23
     b60:	66 0f       	add	r22, r22
     b62:	77 1f       	adc	r23, r23
     b64:	68 5e       	subi	r22, 0xE8	; 232
     b66:	7e 4f       	sbci	r23, 0xFE	; 254
     b68:	48 e0       	ldi	r20, 0x08	; 8
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	ce 01       	movw	r24, r28
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	0e 94 3a 08 	call	0x1074	; 0x1074 <memcpy_P>
	ledmatrix_update_column(MATRIX_NUM_COLUMNS - 1, column_data);
     b74:	be 01       	movw	r22, r28
     b76:	6f 5f       	subi	r22, 0xFF	; 255
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	8f e0       	ldi	r24, 0x0F	; 15
     b7c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <ledmatrix_update_column>
	next_column = GET_NEXT_COLUMN(next_column, anim_data);
     b80:	40 91 28 02 	lds	r20, 0x0228	; 0x800228 <next_column>
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	4f 5f       	subi	r20, 0xFF	; 255
     b88:	5f 4f       	sbci	r21, 0xFF	; 255
     b8a:	9a 01       	movw	r18, r20
     b8c:	36 95       	lsr	r19
     b8e:	27 95       	ror	r18
     b90:	ab e7       	ldi	r26, 0x7B	; 123
     b92:	b4 e1       	ldi	r27, 0x14	; 20
     b94:	0e 94 df 07 	call	0xfbe	; 0xfbe <__umulhisi3>
     b98:	96 95       	lsr	r25
     b9a:	87 95       	ror	r24
     b9c:	62 e3       	ldi	r22, 0x32	; 50
     b9e:	68 9f       	mul	r22, r24
     ba0:	90 01       	movw	r18, r0
     ba2:	69 9f       	mul	r22, r25
     ba4:	30 0d       	add	r19, r0
     ba6:	11 24       	eor	r1, r1
     ba8:	ca 01       	movw	r24, r20
     baa:	82 1b       	sub	r24, r18
     bac:	93 0b       	sbc	r25, r19
     bae:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_column>
	if (next_column == MATRIX_NUM_COLUMNS)
     bb2:	80 31       	cpi	r24, 0x10	; 16
     bb4:	29 f4       	brne	.+10     	; 0xbc0 <display_next_column+0x86>
	{
		flags |= FLG_IS_NEW_CYCLE;
     bb6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <flags>
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <flags>
	}
}
     bc0:	28 96       	adiw	r28, 0x08	; 8
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <display_title_pixel>:
		}
	}
}

static bool display_title_pixel(uint8_t line, uint8_t col, bool coloured)
{
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	28 97       	sbiw	r28, 0x08	; 8
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	f6 2e       	mov	r15, r22
     bf0:	e4 2e       	mov	r14, r20
	uint64_t data;
	memcpy_P(&data, &title_data[line], sizeof(data));
     bf2:	68 2f       	mov	r22, r24
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	66 0f       	add	r22, r22
     bf8:	77 1f       	adc	r23, r23
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	66 0f       	add	r22, r22
     c00:	77 1f       	adc	r23, r23
     c02:	60 51       	subi	r22, 0x10	; 16
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	48 e0       	ldi	r20, 0x08	; 8
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	ce 01       	movw	r24, r28
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	0e 94 3a 08 	call	0x1074	; 0x1074 <memcpy_P>
	if (data & ((uint64_t)1U << (63 - col)))
     c12:	0f e3       	ldi	r16, 0x3F	; 63
     c14:	10 e0       	ldi	r17, 0x00	; 0
     c16:	0f 19       	sub	r16, r15
     c18:	11 09       	sbc	r17, r1
     c1a:	29 81       	ldd	r18, Y+1	; 0x01
     c1c:	3a 81       	ldd	r19, Y+2	; 0x02
     c1e:	4b 81       	ldd	r20, Y+3	; 0x03
     c20:	5c 81       	ldd	r21, Y+4	; 0x04
     c22:	6d 81       	ldd	r22, Y+5	; 0x05
     c24:	7e 81       	ldd	r23, Y+6	; 0x06
     c26:	8f 81       	ldd	r24, Y+7	; 0x07
     c28:	98 85       	ldd	r25, Y+8	; 0x08
     c2a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__lshrdi3>
     c2e:	21 70       	andi	r18, 0x01	; 1
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	0e 94 0c 08 	call	0x1018	; 0x1018 <__cmpdi2_s8>
     c44:	c1 f0       	breq	.+48     	; 0xc76 <display_title_pixel+0xa4>
	{
		if (!coloured)
     c46:	e1 10       	cpse	r14, r1
     c48:	1b c0       	rjmp	.+54     	; 0xc80 <display_title_pixel+0xae>
     c4a:	10 e0       	ldi	r17, 0x00	; 0
     c4c:	0f c0       	rjmp	.+30     	; 0xc6c <display_title_pixel+0x9a>
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
			{
				if (col <= title_pos[j])
     c4e:	81 2f       	mov	r24, r17
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	fc 01       	movw	r30, r24
     c54:	eb 56       	subi	r30, 0x6B	; 107
     c56:	fe 4f       	sbci	r31, 0xFE	; 254
     c58:	20 81       	ld	r18, Z
     c5a:	2f 15       	cp	r18, r15
     c5c:	30 f0       	brcs	.+12     	; 0xc6a <display_title_pixel+0x98>
				{
					set_display_attribute(title_attr[j]);
     c5e:	fc 01       	movw	r30, r24
     c60:	e2 57       	subi	r30, 0x72	; 114
     c62:	fe 4f       	sbci	r31, 0xFE	; 254
     c64:	80 81       	ld	r24, Z
     c66:	0e 94 57 07 	call	0xeae	; 0xeae <set_display_attribute>
	memcpy_P(&data, &title_data[line], sizeof(data));
	if (data & ((uint64_t)1U << (63 - col)))
	{
		if (!coloured)
		{
			for (uint8_t j = 0; j < countof(title_pos); j++)
     c6a:	1f 5f       	subi	r17, 0xFF	; 255
     c6c:	17 30       	cpi	r17, 0x07	; 7
     c6e:	78 f3       	brcs	.-34     	; 0xc4e <display_title_pixel+0x7c>
				if (col <= title_pos[j])
				{
					set_display_attribute(title_attr[j]);
				}
			}
			coloured = true;
     c70:	ee 24       	eor	r14, r14
     c72:	e3 94       	inc	r14
     c74:	05 c0       	rjmp	.+10     	; 0xc80 <display_title_pixel+0xae>
		}
	}
	else
	{
		if (coloured)
     c76:	ee 20       	and	r14, r14
     c78:	19 f0       	breq	.+6      	; 0xc80 <display_title_pixel+0xae>
		{
			normal_display_mode();
     c7a:	0e 94 45 07 	call	0xe8a	; 0xe8a <normal_display_mode>
			coloured = false;
     c7e:	e1 2c       	mov	r14, r1
		}
		
	}
	putchar(' ');
     c80:	60 91 4c 03 	lds	r22, 0x034C	; 0x80034c <__iob+0x2>
     c84:	70 91 4d 03 	lds	r23, 0x034D	; 0x80034d <__iob+0x3>
     c88:	80 e2       	ldi	r24, 0x20	; 32
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
	return coloured;
}
     c90:	8e 2d       	mov	r24, r14
     c92:	28 96       	adiw	r28, 0x08	; 8
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	ff 90       	pop	r15
     ca8:	ef 90       	pop	r14
     caa:	08 95       	ret

00000cac <setup_start_screen>:
	}
}

void setup_start_screen(void)
{
	ledmatrix_clear();
     cac:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ledmatrix_clear>
	display_initial_image();
     cb0:	0e 94 6d 05 	call	0xada	; 0xada <display_initial_image>
	flags |= FLG_IS_NEW_CYCLE;
     cb4:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <flags>
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <flags>
     cbe:	08 95       	ret

00000cc0 <update_start_screen>:
}

void update_start_screen(void)
{
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
	uint32_t time = get_current_time();
     cc8:	0e 94 83 07 	call	0xf06	; 0xf06 <get_current_time>
     ccc:	6b 01       	movw	r12, r22
     cce:	7c 01       	movw	r14, r24

	if (flags & FLG_IS_NEW_CYCLE)
     cd0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <flags>
     cd4:	80 ff       	sbrs	r24, 0
     cd6:	16 c0       	rjmp	.+44     	; 0xd04 <update_start_screen+0x44>
	{
		flashing_start_time = time;
     cd8:	c0 92 2d 02 	sts	0x022D, r12	; 0x80022d <flashing_start_time>
     cdc:	d0 92 2e 02 	sts	0x022E, r13	; 0x80022e <flashing_start_time+0x1>
     ce0:	e0 92 2f 02 	sts	0x022F, r14	; 0x80022f <flashing_start_time+0x2>
     ce4:	f0 92 30 02 	sts	0x0230, r15	; 0x800230 <flashing_start_time+0x3>
		last_update_time = time;
     ce8:	c0 92 29 02 	sts	0x0229, r12	; 0x800229 <last_update_time>
     cec:	d0 92 2a 02 	sts	0x022A, r13	; 0x80022a <last_update_time+0x1>
     cf0:	e0 92 2b 02 	sts	0x022B, r14	; 0x80022b <last_update_time+0x2>
     cf4:	f0 92 2c 02 	sts	0x022C, r15	; 0x80022c <last_update_time+0x3>
		next_column = MATRIX_NUM_COLUMNS;
     cf8:	90 e1       	ldi	r25, 0x10	; 16
     cfa:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <next_column>
		flags &= ((~FLG_IS_NEW_CYCLE) & (~FLG_IS_FLASH_DONE) &
     cfe:	88 7f       	andi	r24, 0xF8	; 248
     d00:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <flags>
			(~FLG_TOGGLE_ON));
	}

	if (next_column == MATRIX_NUM_COLUMNS)
     d04:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <next_column>
     d08:	80 31       	cpi	r24, 0x10	; 16
     d0a:	09 f0       	breq	.+2      	; 0xd0e <update_start_screen+0x4e>
     d0c:	64 c0       	rjmp	.+200    	; 0xdd6 <update_start_screen+0x116>
	{
		if (time > flashing_start_time + FLASH_TIME + STATIC_TIME)
     d0e:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <flashing_start_time>
     d12:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <flashing_start_time+0x1>
     d16:	a0 91 2f 02 	lds	r26, 0x022F	; 0x80022f <flashing_start_time+0x2>
     d1a:	b0 91 30 02 	lds	r27, 0x0230	; 0x800230 <flashing_start_time+0x3>
     d1e:	ac 01       	movw	r20, r24
     d20:	bd 01       	movw	r22, r26
     d22:	40 53       	subi	r20, 0x30	; 48
     d24:	58 4f       	sbci	r21, 0xF8	; 248
     d26:	6f 4f       	sbci	r22, 0xFF	; 255
     d28:	7f 4f       	sbci	r23, 0xFF	; 255
     d2a:	4c 15       	cp	r20, r12
     d2c:	5d 05       	cpc	r21, r13
     d2e:	6e 05       	cpc	r22, r14
     d30:	7f 05       	cpc	r23, r15
     d32:	58 f4       	brcc	.+22     	; 0xd4a <update_start_screen+0x8a>
		{
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
     d34:	0e 94 9d 05 	call	0xb3a	; 0xb3a <display_next_column>
			last_update_time = time;
     d38:	c0 92 29 02 	sts	0x0229, r12	; 0x800229 <last_update_time>
     d3c:	d0 92 2a 02 	sts	0x022A, r13	; 0x80022a <last_update_time+0x1>
     d40:	e0 92 2b 02 	sts	0x022B, r14	; 0x80022b <last_update_time+0x2>
     d44:	f0 92 2c 02 	sts	0x022C, r15	; 0x80022c <last_update_time+0x3>
     d48:	61 c0       	rjmp	.+194    	; 0xe0c <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     d4a:	20 91 31 02 	lds	r18, 0x0231	; 0x800231 <flags>
     d4e:	32 2f       	mov	r19, r18
     d50:	32 70       	andi	r19, 0x02	; 2
     d52:	21 fd       	sbrc	r18, 1
     d54:	19 c0       	rjmp	.+50     	; 0xd88 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
     d56:	88 51       	subi	r24, 0x18	; 24
     d58:	9c 4f       	sbci	r25, 0xFC	; 252
     d5a:	af 4f       	sbci	r26, 0xFF	; 255
     d5c:	bf 4f       	sbci	r27, 0xFF	; 255
			// Two seconds have passed since start of flashing,
			// display next column.
			display_next_column();
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     d5e:	8c 15       	cp	r24, r12
     d60:	9d 05       	cpc	r25, r13
     d62:	ae 05       	cpc	r26, r14
     d64:	bf 05       	cpc	r27, r15
     d66:	80 f4       	brcc	.+32     	; 0xd88 <update_start_screen+0xc8>
			flashing_start_time + FLASH_TIME)
		{
			// One second has passed since the start of flashing,
			// turn off flashing.
			display_initial_image();
     d68:	0e 94 6d 05 	call	0xada	; 0xada <display_initial_image>
			flags |= FLG_IS_FLASH_DONE;
     d6c:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <flags>
     d70:	82 60       	ori	r24, 0x02	; 2
     d72:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <flags>
			last_update_time = time;
     d76:	c0 92 29 02 	sts	0x0229, r12	; 0x800229 <last_update_time>
     d7a:	d0 92 2a 02 	sts	0x022A, r13	; 0x80022a <last_update_time+0x1>
     d7e:	e0 92 2b 02 	sts	0x022B, r14	; 0x80022b <last_update_time+0x2>
     d82:	f0 92 2c 02 	sts	0x022C, r15	; 0x80022c <last_update_time+0x3>
     d86:	42 c0       	rjmp	.+132    	; 0xe0c <update_start_screen+0x14c>
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     d88:	31 11       	cpse	r19, r1
     d8a:	40 c0       	rjmp	.+128    	; 0xe0c <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
     d8c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <last_update_time>
     d90:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <last_update_time+0x1>
     d94:	a0 91 2b 02 	lds	r26, 0x022B	; 0x80022b <last_update_time+0x2>
     d98:	b0 91 2c 02 	lds	r27, 0x022C	; 0x80022c <last_update_time+0x3>
     d9c:	8c 59       	subi	r24, 0x9C	; 156
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	af 4f       	sbci	r26, 0xFF	; 255
     da2:	bf 4f       	sbci	r27, 0xFF	; 255
			// turn off flashing.
			display_initial_image();
			flags |= FLG_IS_FLASH_DONE;
			last_update_time = time;
		}
		else if (!(flags & FLG_IS_FLASH_DONE) && time >
     da4:	8c 15       	cp	r24, r12
     da6:	9d 05       	cpc	r25, r13
     da8:	ae 05       	cpc	r26, r14
     daa:	bf 05       	cpc	r27, r15
     dac:	78 f5       	brcc	.+94     	; 0xe0c <update_start_screen+0x14c>
			last_update_time + FLASH_SPEED)
		{
			// 0.1 seconds passed since last flash, flash the LED
			// matrix.
			if ((flags ^= FLG_TOGGLE_ON) & FLG_TOGGLE_ON)
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	28 27       	eor	r18, r24
     db2:	20 93 31 02 	sts	0x0231, r18	; 0x800231 <flags>
     db6:	22 ff       	sbrs	r18, 2
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <update_start_screen+0x100>
			{
				ledmatrix_clear();
     dba:	0e 94 f5 02 	call	0x5ea	; 0x5ea <ledmatrix_clear>
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <update_start_screen+0x104>
			}
			else
			{
				display_initial_image();
     dc0:	0e 94 6d 05 	call	0xada	; 0xada <display_initial_image>
			}
			last_update_time = time;
     dc4:	c0 92 29 02 	sts	0x0229, r12	; 0x800229 <last_update_time>
     dc8:	d0 92 2a 02 	sts	0x022A, r13	; 0x80022a <last_update_time+0x1>
     dcc:	e0 92 2b 02 	sts	0x022B, r14	; 0x80022b <last_update_time+0x2>
     dd0:	f0 92 2c 02 	sts	0x022C, r15	; 0x80022c <last_update_time+0x3>
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <update_start_screen+0x14c>
		}
	}
	else
	{
		if (time > last_update_time + SCROLL_SPEED)
     dd6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <last_update_time>
     dda:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <last_update_time+0x1>
     dde:	a0 91 2b 02 	lds	r26, 0x022B	; 0x80022b <last_update_time+0x2>
     de2:	b0 91 2c 02 	lds	r27, 0x022C	; 0x80022c <last_update_time+0x3>
     de6:	88 53       	subi	r24, 0x38	; 56
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	af 4f       	sbci	r26, 0xFF	; 255
     dec:	bf 4f       	sbci	r27, 0xFF	; 255
     dee:	8c 15       	cp	r24, r12
     df0:	9d 05       	cpc	r25, r13
     df2:	ae 05       	cpc	r26, r14
     df4:	bf 05       	cpc	r27, r15
     df6:	50 f4       	brcc	.+20     	; 0xe0c <update_start_screen+0x14c>
		{
			display_next_column();
     df8:	0e 94 9d 05 	call	0xb3a	; 0xb3a <display_next_column>
			last_update_time = time;
     dfc:	c0 92 29 02 	sts	0x0229, r12	; 0x800229 <last_update_time>
     e00:	d0 92 2a 02 	sts	0x022A, r13	; 0x80022a <last_update_time+0x1>
     e04:	e0 92 2b 02 	sts	0x022B, r14	; 0x80022b <last_update_time+0x2>
     e08:	f0 92 2c 02 	sts	0x022C, r15	; 0x80022c <last_update_time+0x3>
		}
	}
}
     e0c:	ff 90       	pop	r15
     e0e:	ef 90       	pop	r14
     e10:	df 90       	pop	r13
     e12:	cf 90       	pop	r12
     e14:	08 95       	ret

00000e16 <display_terminal_title>:
	putchar(' ');
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
     e16:	ff 92       	push	r15
     e18:	0f 93       	push	r16
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	f8 2e       	mov	r15, r24
     e22:	06 2f       	mov	r16, r22
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
     e24:	10 e0       	ldi	r17, 0x00	; 0
	return coloured;
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
     e26:	d0 e0       	ldi	r29, 0x00	; 0
	for (uint8_t line = 0; line < countof(title_data); line++)
     e28:	14 c0       	rjmp	.+40     	; 0xe52 <display_terminal_title+0x3c>
	{
		move_terminal_cursor(line + row, col);
     e2a:	60 2f       	mov	r22, r16
     e2c:	70 e0       	ldi	r23, 0x00	; 0
     e2e:	8f 2d       	mov	r24, r15
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	81 0f       	add	r24, r17
     e34:	91 1d       	adc	r25, r1
     e36:	0e 94 31 07 	call	0xe62	; 0xe62 <move_terminal_cursor>
		for (uint8_t i = 0; i < 64; i++)
     e3a:	c0 e0       	ldi	r28, 0x00	; 0
     e3c:	07 c0       	rjmp	.+14     	; 0xe4c <display_terminal_title+0x36>
		{
			coloured = display_title_pixel(line, i, coloured);
     e3e:	4d 2f       	mov	r20, r29
     e40:	6c 2f       	mov	r22, r28
     e42:	81 2f       	mov	r24, r17
     e44:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <display_title_pixel>
     e48:	d8 2f       	mov	r29, r24
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
	{
		move_terminal_cursor(line + row, col);
		for (uint8_t i = 0; i < 64; i++)
     e4a:	cf 5f       	subi	r28, 0xFF	; 255
     e4c:	c0 34       	cpi	r28, 0x40	; 64
     e4e:	b8 f3       	brcs	.-18     	; 0xe3e <display_terminal_title+0x28>
}

void display_terminal_title(uint8_t row, uint8_t col)
{
	bool coloured = false;
	for (uint8_t line = 0; line < countof(title_data); line++)
     e50:	1f 5f       	subi	r17, 0xFF	; 255
     e52:	15 30       	cpi	r17, 0x05	; 5
     e54:	50 f3       	brcs	.-44     	; 0xe2a <display_terminal_title+0x14>
		for (uint8_t i = 0; i < 64; i++)
		{
			coloured = display_title_pixel(line, i, coloured);
		}
	}
}
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	1f 91       	pop	r17
     e5c:	0f 91       	pop	r16
     e5e:	ff 90       	pop	r15
     e60:	08 95       	ret

00000e62 <move_terminal_cursor>:
}

void clear_to_end_of_line(void)
{
	printf_P(PSTR("\x1b[K"));
}
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	7f 93       	push	r23
     e68:	6f 93       	push	r22
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	9f 93       	push	r25
     e6e:	8f 93       	push	r24
     e70:	8f eb       	ldi	r24, 0xBF	; 191
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	08 95       	ret

00000e8a <normal_display_mode>:
     e8a:	8a eb       	ldi	r24, 0xBA	; 186
     e8c:	92 e0       	ldi	r25, 0x02	; 2
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	08 95       	ret

00000e9c <clear_terminal>:
     e9c:	85 eb       	ldi	r24, 0xB5	; 181
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	08 95       	ret

00000eae <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter)
{
	printf_P(PSTR("\x1b[%dm"), parameter);
     eae:	1f 92       	push	r1
     eb0:	8f 93       	push	r24
     eb2:	8f ea       	ldi	r24, 0xAF	; 175
     eb4:	92 e0       	ldi	r25, 0x02	; 2
     eb6:	9f 93       	push	r25
     eb8:	8f 93       	push	r24
     eba:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	08 95       	ret

00000ec8 <hide_cursor>:

void hide_cursor(void)
{
	printf_P(PSTR("\x1b[?25l"));
     ec8:	88 ea       	ldi	r24, 0xA8	; 168
     eca:	92 e0       	ldi	r25, 0x02	; 2
     ecc:	9f 93       	push	r25
     ece:	8f 93       	push	r24
     ed0:	0e 94 bd 08 	call	0x117a	; 0x117a <printf_P>
}
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	08 95       	ret

00000eda <init_timer0>:
static volatile uint32_t clock_ticks_ms;

void init_timer0(void)
{
	// Reset clock tick count. L indicates a long (32 bit) constant.
	clock_ticks_ms = 0L;
     eda:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <clock_ticks_ms>
     ede:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <clock_ticks_ms+0x1>
     ee2:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <clock_ticks_ms+0x2>
     ee6:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <clock_ticks_ms+0x3>
	// interrupt every 64 x 125 clock cycles, i.e. every 1 milliseconds
	// with an 8MHz clock. The counter will be reset to 0 when it reaches
	// it's output compare value.

	// Clear the timer.
	TCNT0 = 0;
     eea:	16 bc       	out	0x26, r1	; 38

	// Set the output compare value to be 124.
	OCR0A = 124;
     eec:	8c e7       	ldi	r24, 0x7C	; 124
     eee:	87 bd       	out	0x27, r24	; 39

	// Set the timer to clear on compare match (CTC mode) and to
	// divide the clock by 64. This starts the timer running.
	TCCR0A = (1 << WGM01);
     ef0:	92 e0       	ldi	r25, 0x02	; 2
     ef2:	94 bd       	out	0x24, r25	; 36
	TCCR0B = (1 << CS01) | (1 << CS00);
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	85 bd       	out	0x25, r24	; 37

	// Enable an interrupt on output compare match. Note that
	// interrupts have to be enabled globally before the interrupts
	// will fire.
	TIMSK0 |= (1 << OCIE0A);
     ef8:	ee e6       	ldi	r30, 0x6E	; 110
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	80 83       	st	Z, r24

	// Make sure the interrupt flag is cleared by writing a 1 to it.
	TIFR0 = (1 << OCF0A);
     f02:	95 bb       	out	0x15, r25	; 21
     f04:	08 95       	ret

00000f06 <get_current_time>:
uint32_t get_current_time(void)
{
	// Disable interrupts so we can be sure that the interrupt doesn't
	// fire when we've copied just a couple of bytes of the value.
	// Interrupts are re-enabled if they were enabled at the start.
	uint8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     f06:	8f b7       	in	r24, 0x3f	; 63
     f08:	28 2f       	mov	r18, r24
     f0a:	20 78       	andi	r18, 0x80	; 128
	cli();
     f0c:	f8 94       	cli
	uint32_t result = clock_ticks_ms;
     f0e:	60 91 32 02 	lds	r22, 0x0232	; 0x800232 <clock_ticks_ms>
     f12:	70 91 33 02 	lds	r23, 0x0233	; 0x800233 <clock_ticks_ms+0x1>
     f16:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <clock_ticks_ms+0x2>
     f1a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <clock_ticks_ms+0x3>
	if (interrupts_were_enabled)
     f1e:	22 23       	and	r18, r18
     f20:	09 f0       	breq	.+2      	; 0xf24 <get_current_time+0x1e>
	{
		sei();
     f22:	78 94       	sei
	}
	return result;
}
     f24:	08 95       	ret

00000f26 <__vector_16>:

// Interrupt handler for clock tick.
ISR(TIMER0_COMPA_vect)
{
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	af 93       	push	r26
     f36:	bf 93       	push	r27
	// Increment our clock tick count.
	clock_ticks_ms++;
     f38:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <clock_ticks_ms>
     f3c:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <clock_ticks_ms+0x1>
     f40:	a0 91 34 02 	lds	r26, 0x0234	; 0x800234 <clock_ticks_ms+0x2>
     f44:	b0 91 35 02 	lds	r27, 0x0235	; 0x800235 <clock_ticks_ms+0x3>
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	a1 1d       	adc	r26, r1
     f4c:	b1 1d       	adc	r27, r1
     f4e:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <clock_ticks_ms>
     f52:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <clock_ticks_ms+0x1>
     f56:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <clock_ticks_ms+0x2>
     f5a:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <clock_ticks_ms+0x3>
}
     f5e:	bf 91       	pop	r27
     f60:	af 91       	pop	r26
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <init_timer1>:
#include <avr/interrupt.h>

void init_timer1(void)
{
	// Setup timer 1.
	TCNT1 = 0;
     f70:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     f74:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     f78:	08 95       	ret

00000f7a <init_timer2>:
#include <avr/interrupt.h>

void init_timer2(void)
{
	// Setup timer 2.
	TCNT2 = 0;
     f7a:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
     f7e:	08 95       	ret

00000f80 <__divmodsi4>:
     f80:	05 2e       	mov	r0, r21
     f82:	97 fb       	bst	r25, 7
     f84:	1e f4       	brtc	.+6      	; 0xf8c <__divmodsi4+0xc>
     f86:	00 94       	com	r0
     f88:	0e 94 d7 07 	call	0xfae	; 0xfae <__negsi2>
     f8c:	57 fd       	sbrc	r21, 7
     f8e:	07 d0       	rcall	.+14     	; 0xf9e <__divmodsi4_neg2>
     f90:	0e 94 18 08 	call	0x1030	; 0x1030 <__udivmodsi4>
     f94:	07 fc       	sbrc	r0, 7
     f96:	03 d0       	rcall	.+6      	; 0xf9e <__divmodsi4_neg2>
     f98:	4e f4       	brtc	.+18     	; 0xfac <__divmodsi4_exit>
     f9a:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__negsi2>

00000f9e <__divmodsi4_neg2>:
     f9e:	50 95       	com	r21
     fa0:	40 95       	com	r20
     fa2:	30 95       	com	r19
     fa4:	21 95       	neg	r18
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	4f 4f       	sbci	r20, 0xFF	; 255
     faa:	5f 4f       	sbci	r21, 0xFF	; 255

00000fac <__divmodsi4_exit>:
     fac:	08 95       	ret

00000fae <__negsi2>:
     fae:	90 95       	com	r25
     fb0:	80 95       	com	r24
     fb2:	70 95       	com	r23
     fb4:	61 95       	neg	r22
     fb6:	7f 4f       	sbci	r23, 0xFF	; 255
     fb8:	8f 4f       	sbci	r24, 0xFF	; 255
     fba:	9f 4f       	sbci	r25, 0xFF	; 255
     fbc:	08 95       	ret

00000fbe <__umulhisi3>:
     fbe:	a2 9f       	mul	r26, r18
     fc0:	b0 01       	movw	r22, r0
     fc2:	b3 9f       	mul	r27, r19
     fc4:	c0 01       	movw	r24, r0
     fc6:	a3 9f       	mul	r26, r19
     fc8:	70 0d       	add	r23, r0
     fca:	81 1d       	adc	r24, r1
     fcc:	11 24       	eor	r1, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	b2 9f       	mul	r27, r18
     fd2:	70 0d       	add	r23, r0
     fd4:	81 1d       	adc	r24, r1
     fd6:	11 24       	eor	r1, r1
     fd8:	91 1d       	adc	r25, r1
     fda:	08 95       	ret

00000fdc <__ashrdi3>:
     fdc:	97 fb       	bst	r25, 7
     fde:	10 f8       	bld	r1, 0

00000fe0 <__lshrdi3>:
     fe0:	16 94       	lsr	r1
     fe2:	00 08       	sbc	r0, r0
     fe4:	0f 93       	push	r16
     fe6:	08 30       	cpi	r16, 0x08	; 8
     fe8:	98 f0       	brcs	.+38     	; 0x1010 <__lshrdi3+0x30>
     fea:	08 50       	subi	r16, 0x08	; 8
     fec:	23 2f       	mov	r18, r19
     fee:	34 2f       	mov	r19, r20
     ff0:	45 2f       	mov	r20, r21
     ff2:	56 2f       	mov	r21, r22
     ff4:	67 2f       	mov	r22, r23
     ff6:	78 2f       	mov	r23, r24
     ff8:	89 2f       	mov	r24, r25
     ffa:	90 2d       	mov	r25, r0
     ffc:	f4 cf       	rjmp	.-24     	; 0xfe6 <__lshrdi3+0x6>
     ffe:	05 94       	asr	r0
    1000:	97 95       	ror	r25
    1002:	87 95       	ror	r24
    1004:	77 95       	ror	r23
    1006:	67 95       	ror	r22
    1008:	57 95       	ror	r21
    100a:	47 95       	ror	r20
    100c:	37 95       	ror	r19
    100e:	27 95       	ror	r18
    1010:	0a 95       	dec	r16
    1012:	aa f7       	brpl	.-22     	; 0xffe <__lshrdi3+0x1e>
    1014:	0f 91       	pop	r16
    1016:	08 95       	ret

00001018 <__cmpdi2_s8>:
    1018:	00 24       	eor	r0, r0
    101a:	a7 fd       	sbrc	r26, 7
    101c:	00 94       	com	r0
    101e:	2a 17       	cp	r18, r26
    1020:	30 05       	cpc	r19, r0
    1022:	40 05       	cpc	r20, r0
    1024:	50 05       	cpc	r21, r0
    1026:	60 05       	cpc	r22, r0
    1028:	70 05       	cpc	r23, r0
    102a:	80 05       	cpc	r24, r0
    102c:	90 05       	cpc	r25, r0
    102e:	08 95       	ret

00001030 <__udivmodsi4>:
    1030:	a1 e2       	ldi	r26, 0x21	; 33
    1032:	1a 2e       	mov	r1, r26
    1034:	aa 1b       	sub	r26, r26
    1036:	bb 1b       	sub	r27, r27
    1038:	fd 01       	movw	r30, r26
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <__udivmodsi4_ep>

0000103c <__udivmodsi4_loop>:
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	ee 1f       	adc	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	a2 17       	cp	r26, r18
    1046:	b3 07       	cpc	r27, r19
    1048:	e4 07       	cpc	r30, r20
    104a:	f5 07       	cpc	r31, r21
    104c:	20 f0       	brcs	.+8      	; 0x1056 <__udivmodsi4_ep>
    104e:	a2 1b       	sub	r26, r18
    1050:	b3 0b       	sbc	r27, r19
    1052:	e4 0b       	sbc	r30, r20
    1054:	f5 0b       	sbc	r31, r21

00001056 <__udivmodsi4_ep>:
    1056:	66 1f       	adc	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	1a 94       	dec	r1
    1060:	69 f7       	brne	.-38     	; 0x103c <__udivmodsi4_loop>
    1062:	60 95       	com	r22
    1064:	70 95       	com	r23
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	bd 01       	movw	r22, r26
    1070:	cf 01       	movw	r24, r30
    1072:	08 95       	ret

00001074 <memcpy_P>:
    1074:	fb 01       	movw	r30, r22
    1076:	dc 01       	movw	r26, r24
    1078:	02 c0       	rjmp	.+4      	; 0x107e <memcpy_P+0xa>
    107a:	05 90       	lpm	r0, Z+
    107c:	0d 92       	st	X+, r0
    107e:	41 50       	subi	r20, 0x01	; 1
    1080:	50 40       	sbci	r21, 0x00	; 0
    1082:	d8 f7       	brcc	.-10     	; 0x107a <memcpy_P+0x6>
    1084:	08 95       	ret

00001086 <fgetc>:
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
    108c:	2b 81       	ldd	r18, Y+3	; 0x03
    108e:	20 ff       	sbrs	r18, 0
    1090:	33 c0       	rjmp	.+102    	; 0x10f8 <fgetc+0x72>
    1092:	26 ff       	sbrs	r18, 6
    1094:	0a c0       	rjmp	.+20     	; 0x10aa <fgetc+0x24>
    1096:	2f 7b       	andi	r18, 0xBF	; 191
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	9f 83       	std	Y+7, r25	; 0x07
    10a2:	8e 83       	std	Y+6, r24	; 0x06
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	29 c0       	rjmp	.+82     	; 0x10fc <fgetc+0x76>
    10aa:	22 ff       	sbrs	r18, 2
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <fgetc+0x46>
    10ae:	e8 81       	ld	r30, Y
    10b0:	f9 81       	ldd	r31, Y+1	; 0x01
    10b2:	80 81       	ld	r24, Z
    10b4:	08 2e       	mov	r0, r24
    10b6:	00 0c       	add	r0, r0
    10b8:	99 0b       	sbc	r25, r25
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	19 f4       	brne	.+6      	; 0x10c4 <fgetc+0x3e>
    10be:	20 62       	ori	r18, 0x20	; 32
    10c0:	2b 83       	std	Y+3, r18	; 0x03
    10c2:	1a c0       	rjmp	.+52     	; 0x10f8 <fgetc+0x72>
    10c4:	31 96       	adiw	r30, 0x01	; 1
    10c6:	f9 83       	std	Y+1, r31	; 0x01
    10c8:	e8 83       	st	Y, r30
    10ca:	0e c0       	rjmp	.+28     	; 0x10e8 <fgetc+0x62>
    10cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    10ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    10d0:	09 95       	icall
    10d2:	97 ff       	sbrs	r25, 7
    10d4:	09 c0       	rjmp	.+18     	; 0x10e8 <fgetc+0x62>
    10d6:	2b 81       	ldd	r18, Y+3	; 0x03
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	11 f0       	breq	.+4      	; 0x10e0 <fgetc+0x5a>
    10dc:	80 e2       	ldi	r24, 0x20	; 32
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <fgetc+0x5c>
    10e0:	80 e1       	ldi	r24, 0x10	; 16
    10e2:	82 2b       	or	r24, r18
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <fgetc+0x72>
    10e8:	2e 81       	ldd	r18, Y+6	; 0x06
    10ea:	3f 81       	ldd	r19, Y+7	; 0x07
    10ec:	2f 5f       	subi	r18, 0xFF	; 255
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	3f 83       	std	Y+7, r19	; 0x07
    10f2:	2e 83       	std	Y+6, r18	; 0x06
    10f4:	99 27       	eor	r25, r25
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <fgetc+0x76>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <fputc>:
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	fb 01       	movw	r30, r22
    110c:	23 81       	ldd	r18, Z+3	; 0x03
    110e:	21 fd       	sbrc	r18, 1
    1110:	03 c0       	rjmp	.+6      	; 0x1118 <fputc+0x16>
    1112:	8f ef       	ldi	r24, 0xFF	; 255
    1114:	9f ef       	ldi	r25, 0xFF	; 255
    1116:	2c c0       	rjmp	.+88     	; 0x1170 <fputc+0x6e>
    1118:	22 ff       	sbrs	r18, 2
    111a:	16 c0       	rjmp	.+44     	; 0x1148 <fputc+0x46>
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	24 81       	ldd	r18, Z+4	; 0x04
    1122:	35 81       	ldd	r19, Z+5	; 0x05
    1124:	42 17       	cp	r20, r18
    1126:	53 07       	cpc	r21, r19
    1128:	44 f4       	brge	.+16     	; 0x113a <fputc+0x38>
    112a:	a0 81       	ld	r26, Z
    112c:	b1 81       	ldd	r27, Z+1	; 0x01
    112e:	9d 01       	movw	r18, r26
    1130:	2f 5f       	subi	r18, 0xFF	; 255
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	31 83       	std	Z+1, r19	; 0x01
    1136:	20 83       	st	Z, r18
    1138:	8c 93       	st	X, r24
    113a:	26 81       	ldd	r18, Z+6	; 0x06
    113c:	37 81       	ldd	r19, Z+7	; 0x07
    113e:	2f 5f       	subi	r18, 0xFF	; 255
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	37 83       	std	Z+7, r19	; 0x07
    1144:	26 83       	std	Z+6, r18	; 0x06
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <fputc+0x6e>
    1148:	8b 01       	movw	r16, r22
    114a:	ec 01       	movw	r28, r24
    114c:	fb 01       	movw	r30, r22
    114e:	00 84       	ldd	r0, Z+8	; 0x08
    1150:	f1 85       	ldd	r31, Z+9	; 0x09
    1152:	e0 2d       	mov	r30, r0
    1154:	09 95       	icall
    1156:	89 2b       	or	r24, r25
    1158:	e1 f6       	brne	.-72     	; 0x1112 <fputc+0x10>
    115a:	d8 01       	movw	r26, r16
    115c:	16 96       	adiw	r26, 0x06	; 6
    115e:	8d 91       	ld	r24, X+
    1160:	9c 91       	ld	r25, X
    1162:	17 97       	sbiw	r26, 0x07	; 7
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	17 96       	adiw	r26, 0x07	; 7
    1168:	9c 93       	st	X, r25
    116a:	8e 93       	st	-X, r24
    116c:	16 97       	sbiw	r26, 0x06	; 6
    116e:	ce 01       	movw	r24, r28
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <printf_P>:
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e3 ec       	ldi	r30, 0xC3	; 195
    1180:	f8 e0       	ldi	r31, 0x08	; 8
    1182:	0c 94 46 0b 	jmp	0x168c	; 0x168c <__prologue_saves__+0x1c>
    1186:	ae 01       	movw	r20, r28
    1188:	49 5f       	subi	r20, 0xF9	; 249
    118a:	5f 4f       	sbci	r21, 0xFF	; 255
    118c:	da 01       	movw	r26, r20
    118e:	6d 91       	ld	r22, X+
    1190:	7d 91       	ld	r23, X+
    1192:	ad 01       	movw	r20, r26
    1194:	0a e4       	ldi	r16, 0x4A	; 74
    1196:	13 e0       	ldi	r17, 0x03	; 3
    1198:	f8 01       	movw	r30, r16
    119a:	82 81       	ldd	r24, Z+2	; 0x02
    119c:	93 81       	ldd	r25, Z+3	; 0x03
    119e:	dc 01       	movw	r26, r24
    11a0:	13 96       	adiw	r26, 0x03	; 3
    11a2:	2c 91       	ld	r18, X
    11a4:	13 97       	sbiw	r26, 0x03	; 3
    11a6:	28 60       	ori	r18, 0x08	; 8
    11a8:	13 96       	adiw	r26, 0x03	; 3
    11aa:	2c 93       	st	X, r18
    11ac:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <vfprintf>
    11b0:	d8 01       	movw	r26, r16
    11b2:	12 96       	adiw	r26, 0x02	; 2
    11b4:	ed 91       	ld	r30, X+
    11b6:	fc 91       	ld	r31, X
    11b8:	13 97       	sbiw	r26, 0x03	; 3
    11ba:	23 81       	ldd	r18, Z+3	; 0x03
    11bc:	27 7f       	andi	r18, 0xF7	; 247
    11be:	23 83       	std	Z+3, r18	; 0x03
    11c0:	e4 e0       	ldi	r30, 0x04	; 4
    11c2:	0c 94 62 0b 	jmp	0x16c4	; 0x16c4 <__epilogue_restores__+0x1c>

000011c6 <vfprintf>:
    11c6:	ab e0       	ldi	r26, 0x0B	; 11
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e9 ee       	ldi	r30, 0xE9	; 233
    11cc:	f8 e0       	ldi	r31, 0x08	; 8
    11ce:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <__prologue_saves__>
    11d2:	6c 01       	movw	r12, r24
    11d4:	7b 01       	movw	r14, r22
    11d6:	8a 01       	movw	r16, r20
    11d8:	fc 01       	movw	r30, r24
    11da:	17 82       	std	Z+7, r1	; 0x07
    11dc:	16 82       	std	Z+6, r1	; 0x06
    11de:	83 81       	ldd	r24, Z+3	; 0x03
    11e0:	81 ff       	sbrs	r24, 1
    11e2:	cc c1       	rjmp	.+920    	; 0x157c <vfprintf+0x3b6>
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	3c 01       	movw	r6, r24
    11ea:	f6 01       	movw	r30, r12
    11ec:	93 81       	ldd	r25, Z+3	; 0x03
    11ee:	f7 01       	movw	r30, r14
    11f0:	93 fd       	sbrc	r25, 3
    11f2:	85 91       	lpm	r24, Z+
    11f4:	93 ff       	sbrs	r25, 3
    11f6:	81 91       	ld	r24, Z+
    11f8:	7f 01       	movw	r14, r30
    11fa:	88 23       	and	r24, r24
    11fc:	09 f4       	brne	.+2      	; 0x1200 <vfprintf+0x3a>
    11fe:	ba c1       	rjmp	.+884    	; 0x1574 <vfprintf+0x3ae>
    1200:	85 32       	cpi	r24, 0x25	; 37
    1202:	39 f4       	brne	.+14     	; 0x1212 <vfprintf+0x4c>
    1204:	93 fd       	sbrc	r25, 3
    1206:	85 91       	lpm	r24, Z+
    1208:	93 ff       	sbrs	r25, 3
    120a:	81 91       	ld	r24, Z+
    120c:	7f 01       	movw	r14, r30
    120e:	85 32       	cpi	r24, 0x25	; 37
    1210:	29 f4       	brne	.+10     	; 0x121c <vfprintf+0x56>
    1212:	b6 01       	movw	r22, r12
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    121a:	e7 cf       	rjmp	.-50     	; 0x11ea <vfprintf+0x24>
    121c:	91 2c       	mov	r9, r1
    121e:	21 2c       	mov	r2, r1
    1220:	31 2c       	mov	r3, r1
    1222:	ff e1       	ldi	r31, 0x1F	; 31
    1224:	f3 15       	cp	r31, r3
    1226:	d8 f0       	brcs	.+54     	; 0x125e <vfprintf+0x98>
    1228:	8b 32       	cpi	r24, 0x2B	; 43
    122a:	79 f0       	breq	.+30     	; 0x124a <vfprintf+0x84>
    122c:	38 f4       	brcc	.+14     	; 0x123c <vfprintf+0x76>
    122e:	80 32       	cpi	r24, 0x20	; 32
    1230:	79 f0       	breq	.+30     	; 0x1250 <vfprintf+0x8a>
    1232:	83 32       	cpi	r24, 0x23	; 35
    1234:	a1 f4       	brne	.+40     	; 0x125e <vfprintf+0x98>
    1236:	23 2d       	mov	r18, r3
    1238:	20 61       	ori	r18, 0x10	; 16
    123a:	1d c0       	rjmp	.+58     	; 0x1276 <vfprintf+0xb0>
    123c:	8d 32       	cpi	r24, 0x2D	; 45
    123e:	61 f0       	breq	.+24     	; 0x1258 <vfprintf+0x92>
    1240:	80 33       	cpi	r24, 0x30	; 48
    1242:	69 f4       	brne	.+26     	; 0x125e <vfprintf+0x98>
    1244:	23 2d       	mov	r18, r3
    1246:	21 60       	ori	r18, 0x01	; 1
    1248:	16 c0       	rjmp	.+44     	; 0x1276 <vfprintf+0xb0>
    124a:	83 2d       	mov	r24, r3
    124c:	82 60       	ori	r24, 0x02	; 2
    124e:	38 2e       	mov	r3, r24
    1250:	e3 2d       	mov	r30, r3
    1252:	e4 60       	ori	r30, 0x04	; 4
    1254:	3e 2e       	mov	r3, r30
    1256:	2a c0       	rjmp	.+84     	; 0x12ac <vfprintf+0xe6>
    1258:	f3 2d       	mov	r31, r3
    125a:	f8 60       	ori	r31, 0x08	; 8
    125c:	1d c0       	rjmp	.+58     	; 0x1298 <vfprintf+0xd2>
    125e:	37 fc       	sbrc	r3, 7
    1260:	2d c0       	rjmp	.+90     	; 0x12bc <vfprintf+0xf6>
    1262:	20 ed       	ldi	r18, 0xD0	; 208
    1264:	28 0f       	add	r18, r24
    1266:	2a 30       	cpi	r18, 0x0A	; 10
    1268:	40 f0       	brcs	.+16     	; 0x127a <vfprintf+0xb4>
    126a:	8e 32       	cpi	r24, 0x2E	; 46
    126c:	b9 f4       	brne	.+46     	; 0x129c <vfprintf+0xd6>
    126e:	36 fc       	sbrc	r3, 6
    1270:	81 c1       	rjmp	.+770    	; 0x1574 <vfprintf+0x3ae>
    1272:	23 2d       	mov	r18, r3
    1274:	20 64       	ori	r18, 0x40	; 64
    1276:	32 2e       	mov	r3, r18
    1278:	19 c0       	rjmp	.+50     	; 0x12ac <vfprintf+0xe6>
    127a:	36 fe       	sbrs	r3, 6
    127c:	06 c0       	rjmp	.+12     	; 0x128a <vfprintf+0xc4>
    127e:	8a e0       	ldi	r24, 0x0A	; 10
    1280:	98 9e       	mul	r9, r24
    1282:	20 0d       	add	r18, r0
    1284:	11 24       	eor	r1, r1
    1286:	92 2e       	mov	r9, r18
    1288:	11 c0       	rjmp	.+34     	; 0x12ac <vfprintf+0xe6>
    128a:	ea e0       	ldi	r30, 0x0A	; 10
    128c:	2e 9e       	mul	r2, r30
    128e:	20 0d       	add	r18, r0
    1290:	11 24       	eor	r1, r1
    1292:	22 2e       	mov	r2, r18
    1294:	f3 2d       	mov	r31, r3
    1296:	f0 62       	ori	r31, 0x20	; 32
    1298:	3f 2e       	mov	r3, r31
    129a:	08 c0       	rjmp	.+16     	; 0x12ac <vfprintf+0xe6>
    129c:	8c 36       	cpi	r24, 0x6C	; 108
    129e:	21 f4       	brne	.+8      	; 0x12a8 <vfprintf+0xe2>
    12a0:	83 2d       	mov	r24, r3
    12a2:	80 68       	ori	r24, 0x80	; 128
    12a4:	38 2e       	mov	r3, r24
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0xe6>
    12a8:	88 36       	cpi	r24, 0x68	; 104
    12aa:	41 f4       	brne	.+16     	; 0x12bc <vfprintf+0xf6>
    12ac:	f7 01       	movw	r30, r14
    12ae:	93 fd       	sbrc	r25, 3
    12b0:	85 91       	lpm	r24, Z+
    12b2:	93 ff       	sbrs	r25, 3
    12b4:	81 91       	ld	r24, Z+
    12b6:	7f 01       	movw	r14, r30
    12b8:	81 11       	cpse	r24, r1
    12ba:	b3 cf       	rjmp	.-154    	; 0x1222 <vfprintf+0x5c>
    12bc:	98 2f       	mov	r25, r24
    12be:	9f 7d       	andi	r25, 0xDF	; 223
    12c0:	95 54       	subi	r25, 0x45	; 69
    12c2:	93 30       	cpi	r25, 0x03	; 3
    12c4:	28 f4       	brcc	.+10     	; 0x12d0 <vfprintf+0x10a>
    12c6:	0c 5f       	subi	r16, 0xFC	; 252
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	9f e3       	ldi	r25, 0x3F	; 63
    12cc:	99 83       	std	Y+1, r25	; 0x01
    12ce:	0d c0       	rjmp	.+26     	; 0x12ea <vfprintf+0x124>
    12d0:	83 36       	cpi	r24, 0x63	; 99
    12d2:	31 f0       	breq	.+12     	; 0x12e0 <vfprintf+0x11a>
    12d4:	83 37       	cpi	r24, 0x73	; 115
    12d6:	71 f0       	breq	.+28     	; 0x12f4 <vfprintf+0x12e>
    12d8:	83 35       	cpi	r24, 0x53	; 83
    12da:	09 f0       	breq	.+2      	; 0x12de <vfprintf+0x118>
    12dc:	59 c0       	rjmp	.+178    	; 0x1390 <vfprintf+0x1ca>
    12de:	21 c0       	rjmp	.+66     	; 0x1322 <vfprintf+0x15c>
    12e0:	f8 01       	movw	r30, r16
    12e2:	80 81       	ld	r24, Z
    12e4:	89 83       	std	Y+1, r24	; 0x01
    12e6:	0e 5f       	subi	r16, 0xFE	; 254
    12e8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ea:	88 24       	eor	r8, r8
    12ec:	83 94       	inc	r8
    12ee:	91 2c       	mov	r9, r1
    12f0:	53 01       	movw	r10, r6
    12f2:	13 c0       	rjmp	.+38     	; 0x131a <vfprintf+0x154>
    12f4:	28 01       	movw	r4, r16
    12f6:	f2 e0       	ldi	r31, 0x02	; 2
    12f8:	4f 0e       	add	r4, r31
    12fa:	51 1c       	adc	r5, r1
    12fc:	f8 01       	movw	r30, r16
    12fe:	a0 80       	ld	r10, Z
    1300:	b1 80       	ldd	r11, Z+1	; 0x01
    1302:	36 fe       	sbrs	r3, 6
    1304:	03 c0       	rjmp	.+6      	; 0x130c <vfprintf+0x146>
    1306:	69 2d       	mov	r22, r9
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <vfprintf+0x14a>
    130c:	6f ef       	ldi	r22, 0xFF	; 255
    130e:	7f ef       	ldi	r23, 0xFF	; 255
    1310:	c5 01       	movw	r24, r10
    1312:	0e 94 cf 0a 	call	0x159e	; 0x159e <strnlen>
    1316:	4c 01       	movw	r8, r24
    1318:	82 01       	movw	r16, r4
    131a:	f3 2d       	mov	r31, r3
    131c:	ff 77       	andi	r31, 0x7F	; 127
    131e:	3f 2e       	mov	r3, r31
    1320:	16 c0       	rjmp	.+44     	; 0x134e <vfprintf+0x188>
    1322:	28 01       	movw	r4, r16
    1324:	22 e0       	ldi	r18, 0x02	; 2
    1326:	42 0e       	add	r4, r18
    1328:	51 1c       	adc	r5, r1
    132a:	f8 01       	movw	r30, r16
    132c:	a0 80       	ld	r10, Z
    132e:	b1 80       	ldd	r11, Z+1	; 0x01
    1330:	36 fe       	sbrs	r3, 6
    1332:	03 c0       	rjmp	.+6      	; 0x133a <vfprintf+0x174>
    1334:	69 2d       	mov	r22, r9
    1336:	70 e0       	ldi	r23, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <vfprintf+0x178>
    133a:	6f ef       	ldi	r22, 0xFF	; 255
    133c:	7f ef       	ldi	r23, 0xFF	; 255
    133e:	c5 01       	movw	r24, r10
    1340:	0e 94 c4 0a 	call	0x1588	; 0x1588 <strnlen_P>
    1344:	4c 01       	movw	r8, r24
    1346:	f3 2d       	mov	r31, r3
    1348:	f0 68       	ori	r31, 0x80	; 128
    134a:	3f 2e       	mov	r3, r31
    134c:	82 01       	movw	r16, r4
    134e:	33 fc       	sbrc	r3, 3
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <vfprintf+0x1c2>
    1352:	82 2d       	mov	r24, r2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	88 16       	cp	r8, r24
    1358:	99 06       	cpc	r9, r25
    135a:	b0 f4       	brcc	.+44     	; 0x1388 <vfprintf+0x1c2>
    135c:	b6 01       	movw	r22, r12
    135e:	80 e2       	ldi	r24, 0x20	; 32
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1366:	2a 94       	dec	r2
    1368:	f4 cf       	rjmp	.-24     	; 0x1352 <vfprintf+0x18c>
    136a:	f5 01       	movw	r30, r10
    136c:	37 fc       	sbrc	r3, 7
    136e:	85 91       	lpm	r24, Z+
    1370:	37 fe       	sbrs	r3, 7
    1372:	81 91       	ld	r24, Z+
    1374:	5f 01       	movw	r10, r30
    1376:	b6 01       	movw	r22, r12
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    137e:	21 10       	cpse	r2, r1
    1380:	2a 94       	dec	r2
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	82 1a       	sub	r8, r18
    1386:	91 08       	sbc	r9, r1
    1388:	81 14       	cp	r8, r1
    138a:	91 04       	cpc	r9, r1
    138c:	71 f7       	brne	.-36     	; 0x136a <vfprintf+0x1a4>
    138e:	e8 c0       	rjmp	.+464    	; 0x1560 <vfprintf+0x39a>
    1390:	84 36       	cpi	r24, 0x64	; 100
    1392:	11 f0       	breq	.+4      	; 0x1398 <vfprintf+0x1d2>
    1394:	89 36       	cpi	r24, 0x69	; 105
    1396:	41 f5       	brne	.+80     	; 0x13e8 <vfprintf+0x222>
    1398:	f8 01       	movw	r30, r16
    139a:	37 fe       	sbrs	r3, 7
    139c:	07 c0       	rjmp	.+14     	; 0x13ac <vfprintf+0x1e6>
    139e:	60 81       	ld	r22, Z
    13a0:	71 81       	ldd	r23, Z+1	; 0x01
    13a2:	82 81       	ldd	r24, Z+2	; 0x02
    13a4:	93 81       	ldd	r25, Z+3	; 0x03
    13a6:	0c 5f       	subi	r16, 0xFC	; 252
    13a8:	1f 4f       	sbci	r17, 0xFF	; 255
    13aa:	08 c0       	rjmp	.+16     	; 0x13bc <vfprintf+0x1f6>
    13ac:	60 81       	ld	r22, Z
    13ae:	71 81       	ldd	r23, Z+1	; 0x01
    13b0:	07 2e       	mov	r0, r23
    13b2:	00 0c       	add	r0, r0
    13b4:	88 0b       	sbc	r24, r24
    13b6:	99 0b       	sbc	r25, r25
    13b8:	0e 5f       	subi	r16, 0xFE	; 254
    13ba:	1f 4f       	sbci	r17, 0xFF	; 255
    13bc:	f3 2d       	mov	r31, r3
    13be:	ff 76       	andi	r31, 0x6F	; 111
    13c0:	3f 2e       	mov	r3, r31
    13c2:	97 ff       	sbrs	r25, 7
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <vfprintf+0x212>
    13c6:	90 95       	com	r25
    13c8:	80 95       	com	r24
    13ca:	70 95       	com	r23
    13cc:	61 95       	neg	r22
    13ce:	7f 4f       	sbci	r23, 0xFF	; 255
    13d0:	8f 4f       	sbci	r24, 0xFF	; 255
    13d2:	9f 4f       	sbci	r25, 0xFF	; 255
    13d4:	f0 68       	ori	r31, 0x80	; 128
    13d6:	3f 2e       	mov	r3, r31
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	a3 01       	movw	r20, r6
    13de:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__ultoa_invert>
    13e2:	88 2e       	mov	r8, r24
    13e4:	86 18       	sub	r8, r6
    13e6:	45 c0       	rjmp	.+138    	; 0x1472 <vfprintf+0x2ac>
    13e8:	85 37       	cpi	r24, 0x75	; 117
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <vfprintf+0x232>
    13ec:	23 2d       	mov	r18, r3
    13ee:	2f 7e       	andi	r18, 0xEF	; 239
    13f0:	b2 2e       	mov	r11, r18
    13f2:	2a e0       	ldi	r18, 0x0A	; 10
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	25 c0       	rjmp	.+74     	; 0x1442 <vfprintf+0x27c>
    13f8:	93 2d       	mov	r25, r3
    13fa:	99 7f       	andi	r25, 0xF9	; 249
    13fc:	b9 2e       	mov	r11, r25
    13fe:	8f 36       	cpi	r24, 0x6F	; 111
    1400:	c1 f0       	breq	.+48     	; 0x1432 <vfprintf+0x26c>
    1402:	18 f4       	brcc	.+6      	; 0x140a <vfprintf+0x244>
    1404:	88 35       	cpi	r24, 0x58	; 88
    1406:	79 f0       	breq	.+30     	; 0x1426 <vfprintf+0x260>
    1408:	b5 c0       	rjmp	.+362    	; 0x1574 <vfprintf+0x3ae>
    140a:	80 37       	cpi	r24, 0x70	; 112
    140c:	19 f0       	breq	.+6      	; 0x1414 <vfprintf+0x24e>
    140e:	88 37       	cpi	r24, 0x78	; 120
    1410:	21 f0       	breq	.+8      	; 0x141a <vfprintf+0x254>
    1412:	b0 c0       	rjmp	.+352    	; 0x1574 <vfprintf+0x3ae>
    1414:	e9 2f       	mov	r30, r25
    1416:	e0 61       	ori	r30, 0x10	; 16
    1418:	be 2e       	mov	r11, r30
    141a:	b4 fe       	sbrs	r11, 4
    141c:	0d c0       	rjmp	.+26     	; 0x1438 <vfprintf+0x272>
    141e:	fb 2d       	mov	r31, r11
    1420:	f4 60       	ori	r31, 0x04	; 4
    1422:	bf 2e       	mov	r11, r31
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <vfprintf+0x272>
    1426:	34 fe       	sbrs	r3, 4
    1428:	0a c0       	rjmp	.+20     	; 0x143e <vfprintf+0x278>
    142a:	29 2f       	mov	r18, r25
    142c:	26 60       	ori	r18, 0x06	; 6
    142e:	b2 2e       	mov	r11, r18
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0x278>
    1432:	28 e0       	ldi	r18, 0x08	; 8
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	05 c0       	rjmp	.+10     	; 0x1442 <vfprintf+0x27c>
    1438:	20 e1       	ldi	r18, 0x10	; 16
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <vfprintf+0x27c>
    143e:	20 e1       	ldi	r18, 0x10	; 16
    1440:	32 e0       	ldi	r19, 0x02	; 2
    1442:	f8 01       	movw	r30, r16
    1444:	b7 fe       	sbrs	r11, 7
    1446:	07 c0       	rjmp	.+14     	; 0x1456 <vfprintf+0x290>
    1448:	60 81       	ld	r22, Z
    144a:	71 81       	ldd	r23, Z+1	; 0x01
    144c:	82 81       	ldd	r24, Z+2	; 0x02
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	0c 5f       	subi	r16, 0xFC	; 252
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x29c>
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	80 e0       	ldi	r24, 0x00	; 0
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	0e 5f       	subi	r16, 0xFE	; 254
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	a3 01       	movw	r20, r6
    1464:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__ultoa_invert>
    1468:	88 2e       	mov	r8, r24
    146a:	86 18       	sub	r8, r6
    146c:	fb 2d       	mov	r31, r11
    146e:	ff 77       	andi	r31, 0x7F	; 127
    1470:	3f 2e       	mov	r3, r31
    1472:	36 fe       	sbrs	r3, 6
    1474:	0d c0       	rjmp	.+26     	; 0x1490 <vfprintf+0x2ca>
    1476:	23 2d       	mov	r18, r3
    1478:	2e 7f       	andi	r18, 0xFE	; 254
    147a:	a2 2e       	mov	r10, r18
    147c:	89 14       	cp	r8, r9
    147e:	58 f4       	brcc	.+22     	; 0x1496 <vfprintf+0x2d0>
    1480:	34 fe       	sbrs	r3, 4
    1482:	0b c0       	rjmp	.+22     	; 0x149a <vfprintf+0x2d4>
    1484:	32 fc       	sbrc	r3, 2
    1486:	09 c0       	rjmp	.+18     	; 0x149a <vfprintf+0x2d4>
    1488:	83 2d       	mov	r24, r3
    148a:	8e 7e       	andi	r24, 0xEE	; 238
    148c:	a8 2e       	mov	r10, r24
    148e:	05 c0       	rjmp	.+10     	; 0x149a <vfprintf+0x2d4>
    1490:	b8 2c       	mov	r11, r8
    1492:	a3 2c       	mov	r10, r3
    1494:	03 c0       	rjmp	.+6      	; 0x149c <vfprintf+0x2d6>
    1496:	b8 2c       	mov	r11, r8
    1498:	01 c0       	rjmp	.+2      	; 0x149c <vfprintf+0x2d6>
    149a:	b9 2c       	mov	r11, r9
    149c:	a4 fe       	sbrs	r10, 4
    149e:	0f c0       	rjmp	.+30     	; 0x14be <vfprintf+0x2f8>
    14a0:	fe 01       	movw	r30, r28
    14a2:	e8 0d       	add	r30, r8
    14a4:	f1 1d       	adc	r31, r1
    14a6:	80 81       	ld	r24, Z
    14a8:	80 33       	cpi	r24, 0x30	; 48
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <vfprintf+0x2ee>
    14ac:	9a 2d       	mov	r25, r10
    14ae:	99 7e       	andi	r25, 0xE9	; 233
    14b0:	a9 2e       	mov	r10, r25
    14b2:	09 c0       	rjmp	.+18     	; 0x14c6 <vfprintf+0x300>
    14b4:	a2 fe       	sbrs	r10, 2
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <vfprintf+0x2fe>
    14b8:	b3 94       	inc	r11
    14ba:	b3 94       	inc	r11
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <vfprintf+0x300>
    14be:	8a 2d       	mov	r24, r10
    14c0:	86 78       	andi	r24, 0x86	; 134
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <vfprintf+0x300>
    14c4:	b3 94       	inc	r11
    14c6:	a3 fc       	sbrc	r10, 3
    14c8:	11 c0       	rjmp	.+34     	; 0x14ec <vfprintf+0x326>
    14ca:	a0 fe       	sbrs	r10, 0
    14cc:	06 c0       	rjmp	.+12     	; 0x14da <vfprintf+0x314>
    14ce:	b2 14       	cp	r11, r2
    14d0:	88 f4       	brcc	.+34     	; 0x14f4 <vfprintf+0x32e>
    14d2:	28 0c       	add	r2, r8
    14d4:	92 2c       	mov	r9, r2
    14d6:	9b 18       	sub	r9, r11
    14d8:	0e c0       	rjmp	.+28     	; 0x14f6 <vfprintf+0x330>
    14da:	b2 14       	cp	r11, r2
    14dc:	60 f4       	brcc	.+24     	; 0x14f6 <vfprintf+0x330>
    14de:	b6 01       	movw	r22, r12
    14e0:	80 e2       	ldi	r24, 0x20	; 32
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    14e8:	b3 94       	inc	r11
    14ea:	f7 cf       	rjmp	.-18     	; 0x14da <vfprintf+0x314>
    14ec:	b2 14       	cp	r11, r2
    14ee:	18 f4       	brcc	.+6      	; 0x14f6 <vfprintf+0x330>
    14f0:	2b 18       	sub	r2, r11
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <vfprintf+0x332>
    14f4:	98 2c       	mov	r9, r8
    14f6:	21 2c       	mov	r2, r1
    14f8:	a4 fe       	sbrs	r10, 4
    14fa:	10 c0       	rjmp	.+32     	; 0x151c <vfprintf+0x356>
    14fc:	b6 01       	movw	r22, r12
    14fe:	80 e3       	ldi	r24, 0x30	; 48
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1506:	a2 fe       	sbrs	r10, 2
    1508:	17 c0       	rjmp	.+46     	; 0x1538 <vfprintf+0x372>
    150a:	a1 fc       	sbrc	r10, 1
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <vfprintf+0x34e>
    150e:	88 e7       	ldi	r24, 0x78	; 120
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <vfprintf+0x352>
    1514:	88 e5       	ldi	r24, 0x58	; 88
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	b6 01       	movw	r22, r12
    151a:	0c c0       	rjmp	.+24     	; 0x1534 <vfprintf+0x36e>
    151c:	8a 2d       	mov	r24, r10
    151e:	86 78       	andi	r24, 0x86	; 134
    1520:	59 f0       	breq	.+22     	; 0x1538 <vfprintf+0x372>
    1522:	a1 fe       	sbrs	r10, 1
    1524:	02 c0       	rjmp	.+4      	; 0x152a <vfprintf+0x364>
    1526:	8b e2       	ldi	r24, 0x2B	; 43
    1528:	01 c0       	rjmp	.+2      	; 0x152c <vfprintf+0x366>
    152a:	80 e2       	ldi	r24, 0x20	; 32
    152c:	a7 fc       	sbrc	r10, 7
    152e:	8d e2       	ldi	r24, 0x2D	; 45
    1530:	b6 01       	movw	r22, r12
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1538:	89 14       	cp	r8, r9
    153a:	38 f4       	brcc	.+14     	; 0x154a <vfprintf+0x384>
    153c:	b6 01       	movw	r22, r12
    153e:	80 e3       	ldi	r24, 0x30	; 48
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1546:	9a 94       	dec	r9
    1548:	f7 cf       	rjmp	.-18     	; 0x1538 <vfprintf+0x372>
    154a:	8a 94       	dec	r8
    154c:	f3 01       	movw	r30, r6
    154e:	e8 0d       	add	r30, r8
    1550:	f1 1d       	adc	r31, r1
    1552:	80 81       	ld	r24, Z
    1554:	b6 01       	movw	r22, r12
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    155c:	81 10       	cpse	r8, r1
    155e:	f5 cf       	rjmp	.-22     	; 0x154a <vfprintf+0x384>
    1560:	22 20       	and	r2, r2
    1562:	09 f4       	brne	.+2      	; 0x1566 <vfprintf+0x3a0>
    1564:	42 ce       	rjmp	.-892    	; 0x11ea <vfprintf+0x24>
    1566:	b6 01       	movw	r22, r12
    1568:	80 e2       	ldi	r24, 0x20	; 32
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 81 08 	call	0x1102	; 0x1102 <fputc>
    1570:	2a 94       	dec	r2
    1572:	f6 cf       	rjmp	.-20     	; 0x1560 <vfprintf+0x39a>
    1574:	f6 01       	movw	r30, r12
    1576:	86 81       	ldd	r24, Z+6	; 0x06
    1578:	97 81       	ldd	r25, Z+7	; 0x07
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <vfprintf+0x3ba>
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	9f ef       	ldi	r25, 0xFF	; 255
    1580:	2b 96       	adiw	r28, 0x0b	; 11
    1582:	e2 e1       	ldi	r30, 0x12	; 18
    1584:	0c 94 54 0b 	jmp	0x16a8	; 0x16a8 <__epilogue_restores__>

00001588 <strnlen_P>:
    1588:	fc 01       	movw	r30, r24
    158a:	05 90       	lpm	r0, Z+
    158c:	61 50       	subi	r22, 0x01	; 1
    158e:	70 40       	sbci	r23, 0x00	; 0
    1590:	01 10       	cpse	r0, r1
    1592:	d8 f7       	brcc	.-10     	; 0x158a <strnlen_P+0x2>
    1594:	80 95       	com	r24
    1596:	90 95       	com	r25
    1598:	8e 0f       	add	r24, r30
    159a:	9f 1f       	adc	r25, r31
    159c:	08 95       	ret

0000159e <strnlen>:
    159e:	fc 01       	movw	r30, r24
    15a0:	61 50       	subi	r22, 0x01	; 1
    15a2:	70 40       	sbci	r23, 0x00	; 0
    15a4:	01 90       	ld	r0, Z+
    15a6:	01 10       	cpse	r0, r1
    15a8:	d8 f7       	brcc	.-10     	; 0x15a0 <strnlen+0x2>
    15aa:	80 95       	com	r24
    15ac:	90 95       	com	r25
    15ae:	8e 0f       	add	r24, r30
    15b0:	9f 1f       	adc	r25, r31
    15b2:	08 95       	ret

000015b4 <__ultoa_invert>:
    15b4:	fa 01       	movw	r30, r20
    15b6:	aa 27       	eor	r26, r26
    15b8:	28 30       	cpi	r18, 0x08	; 8
    15ba:	51 f1       	breq	.+84     	; 0x1610 <__ultoa_invert+0x5c>
    15bc:	20 31       	cpi	r18, 0x10	; 16
    15be:	81 f1       	breq	.+96     	; 0x1620 <__ultoa_invert+0x6c>
    15c0:	e8 94       	clt
    15c2:	6f 93       	push	r22
    15c4:	6e 7f       	andi	r22, 0xFE	; 254
    15c6:	6e 5f       	subi	r22, 0xFE	; 254
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	8f 4f       	sbci	r24, 0xFF	; 255
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	af 4f       	sbci	r26, 0xFF	; 255
    15d0:	b1 e0       	ldi	r27, 0x01	; 1
    15d2:	3e d0       	rcall	.+124    	; 0x1650 <__ultoa_invert+0x9c>
    15d4:	b4 e0       	ldi	r27, 0x04	; 4
    15d6:	3c d0       	rcall	.+120    	; 0x1650 <__ultoa_invert+0x9c>
    15d8:	67 0f       	add	r22, r23
    15da:	78 1f       	adc	r23, r24
    15dc:	89 1f       	adc	r24, r25
    15de:	9a 1f       	adc	r25, r26
    15e0:	a1 1d       	adc	r26, r1
    15e2:	68 0f       	add	r22, r24
    15e4:	79 1f       	adc	r23, r25
    15e6:	8a 1f       	adc	r24, r26
    15e8:	91 1d       	adc	r25, r1
    15ea:	a1 1d       	adc	r26, r1
    15ec:	6a 0f       	add	r22, r26
    15ee:	71 1d       	adc	r23, r1
    15f0:	81 1d       	adc	r24, r1
    15f2:	91 1d       	adc	r25, r1
    15f4:	a1 1d       	adc	r26, r1
    15f6:	20 d0       	rcall	.+64     	; 0x1638 <__ultoa_invert+0x84>
    15f8:	09 f4       	brne	.+2      	; 0x15fc <__ultoa_invert+0x48>
    15fa:	68 94       	set
    15fc:	3f 91       	pop	r19
    15fe:	2a e0       	ldi	r18, 0x0A	; 10
    1600:	26 9f       	mul	r18, r22
    1602:	11 24       	eor	r1, r1
    1604:	30 19       	sub	r19, r0
    1606:	30 5d       	subi	r19, 0xD0	; 208
    1608:	31 93       	st	Z+, r19
    160a:	de f6       	brtc	.-74     	; 0x15c2 <__ultoa_invert+0xe>
    160c:	cf 01       	movw	r24, r30
    160e:	08 95       	ret
    1610:	46 2f       	mov	r20, r22
    1612:	47 70       	andi	r20, 0x07	; 7
    1614:	40 5d       	subi	r20, 0xD0	; 208
    1616:	41 93       	st	Z+, r20
    1618:	b3 e0       	ldi	r27, 0x03	; 3
    161a:	0f d0       	rcall	.+30     	; 0x163a <__ultoa_invert+0x86>
    161c:	c9 f7       	brne	.-14     	; 0x1610 <__ultoa_invert+0x5c>
    161e:	f6 cf       	rjmp	.-20     	; 0x160c <__ultoa_invert+0x58>
    1620:	46 2f       	mov	r20, r22
    1622:	4f 70       	andi	r20, 0x0F	; 15
    1624:	40 5d       	subi	r20, 0xD0	; 208
    1626:	4a 33       	cpi	r20, 0x3A	; 58
    1628:	18 f0       	brcs	.+6      	; 0x1630 <__ultoa_invert+0x7c>
    162a:	49 5d       	subi	r20, 0xD9	; 217
    162c:	31 fd       	sbrc	r19, 1
    162e:	40 52       	subi	r20, 0x20	; 32
    1630:	41 93       	st	Z+, r20
    1632:	02 d0       	rcall	.+4      	; 0x1638 <__ultoa_invert+0x84>
    1634:	a9 f7       	brne	.-22     	; 0x1620 <__ultoa_invert+0x6c>
    1636:	ea cf       	rjmp	.-44     	; 0x160c <__ultoa_invert+0x58>
    1638:	b4 e0       	ldi	r27, 0x04	; 4
    163a:	a6 95       	lsr	r26
    163c:	97 95       	ror	r25
    163e:	87 95       	ror	r24
    1640:	77 95       	ror	r23
    1642:	67 95       	ror	r22
    1644:	ba 95       	dec	r27
    1646:	c9 f7       	brne	.-14     	; 0x163a <__ultoa_invert+0x86>
    1648:	00 97       	sbiw	r24, 0x00	; 0
    164a:	61 05       	cpc	r22, r1
    164c:	71 05       	cpc	r23, r1
    164e:	08 95       	ret
    1650:	9b 01       	movw	r18, r22
    1652:	ac 01       	movw	r20, r24
    1654:	0a 2e       	mov	r0, r26
    1656:	06 94       	lsr	r0
    1658:	57 95       	ror	r21
    165a:	47 95       	ror	r20
    165c:	37 95       	ror	r19
    165e:	27 95       	ror	r18
    1660:	ba 95       	dec	r27
    1662:	c9 f7       	brne	.-14     	; 0x1656 <__ultoa_invert+0xa2>
    1664:	62 0f       	add	r22, r18
    1666:	73 1f       	adc	r23, r19
    1668:	84 1f       	adc	r24, r20
    166a:	95 1f       	adc	r25, r21
    166c:	a0 1d       	adc	r26, r0
    166e:	08 95       	ret

00001670 <__prologue_saves__>:
    1670:	2f 92       	push	r2
    1672:	3f 92       	push	r3
    1674:	4f 92       	push	r4
    1676:	5f 92       	push	r5
    1678:	6f 92       	push	r6
    167a:	7f 92       	push	r7
    167c:	8f 92       	push	r8
    167e:	9f 92       	push	r9
    1680:	af 92       	push	r10
    1682:	bf 92       	push	r11
    1684:	cf 92       	push	r12
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	ca 1b       	sub	r28, r26
    169a:	db 0b       	sbc	r29, r27
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	09 94       	ijmp

000016a8 <__epilogue_restores__>:
    16a8:	2a 88       	ldd	r2, Y+18	; 0x12
    16aa:	39 88       	ldd	r3, Y+17	; 0x11
    16ac:	48 88       	ldd	r4, Y+16	; 0x10
    16ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    16b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    16b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    16b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    16b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    16b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    16ba:	b9 84       	ldd	r11, Y+9	; 0x09
    16bc:	c8 84       	ldd	r12, Y+8	; 0x08
    16be:	df 80       	ldd	r13, Y+7	; 0x07
    16c0:	ee 80       	ldd	r14, Y+6	; 0x06
    16c2:	fd 80       	ldd	r15, Y+5	; 0x05
    16c4:	0c 81       	ldd	r16, Y+4	; 0x04
    16c6:	1b 81       	ldd	r17, Y+3	; 0x03
    16c8:	aa 81       	ldd	r26, Y+2	; 0x02
    16ca:	b9 81       	ldd	r27, Y+1	; 0x01
    16cc:	ce 0f       	add	r28, r30
    16ce:	d1 1d       	adc	r29, r1
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	ed 01       	movw	r28, r26
    16dc:	08 95       	ret

000016de <_exit>:
    16de:	f8 94       	cli

000016e0 <__stop_program>:
    16e0:	ff cf       	rjmp	.-2      	; 0x16e0 <__stop_program>
